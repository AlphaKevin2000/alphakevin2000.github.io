{"version":3,"sources":["app/creator/duck/actions.js","app/creator/duck/reducers.js","app/creator/duck/index.js","app/questioncatalog/duck/actions.js","app/questioncatalog/duck/reducers.js","app/questioncatalog/duck/index.js","reducers.js","store.js","app/creator/AmazonConnectConfiguratorComponent.jsx","app/creator/duck/amazon-connect/emptycontactflow.js","app/creator/duck/amazon-connect/contactflowerror.js","app/creator/duck/amazon-connect/contactflowend.js","app/creator/duck/amazon-connect/contactflowtransfer.js","app/creator/duck/amazon-connect/contactflowlogging.js","app/creator/duck/amazon-connect/contactflowvoice.js","app/creator/duck/amazon-connect/contactflowplayprompt.js","app/creator/duck/amazon-connect/contactflowrepeat.js","app/creator/duck/amazon-connect/contactflowattribute.js","app/creator/duck/amazon-connect/contactflowinvokeexternal.js","app/creator/duck/amazon-connect/contactflowuserinput.js","app/creator/duck/questions/defaultText.js","app/creator/duck/amazon-connect/contactflowstaticstart.js","app/creator/duck/amazon-connect/contactflowstaticend.js","app/creator/duck/amazon-connect/contactflowquestion.js","app/creator/duck/amazon-connect/contactflowstore.js","app/creator/duck/amazon-connect/contactflowquestiondate.js","app/creator/duck/amazon-connect/contactflow.js","app/creator/duck/foo.js","app/creator/duck/bar.js","app/creator/duck/operations.js","app/creator/AmazonConnectConfiguratorContainer.js","app/creator/CreatorComponent.jsx","app/creator/CreatorContainer.js","app/questioncatalog/RadioOptionComponent.jsx","app/questioncatalog/QuestionComponent.jsx","app/questioncatalog/AddRadioOptionComponent.jsx","app/questioncatalog/duck/operations.js","app/questioncatalog/AddRadioOptionContainer.js","app/questioncatalog/AddQuestionComponent.jsx","app/questioncatalog/AddQuestionContainer.js","app/questioncatalog/QuestionCatalogComponent.jsx","app/questioncatalog/QuestionCatalogContainer.js","app/App.js","index.js"],"names":["setQuestionnaireStrings","stringMap","type","payload","setQuestionnaireOrder","order","setAmazonConnectData","data","addKey","key","setQuestionCount","questionCount","initialState","undefined","language","chariteData","connectConf","uuidList","lambdaKeys","basename","creatorReducer","state","action","Object","assign","push","uuid","indexOf","quesitonCount","updateQuestion","question","questions","map","s","newQuestion","text","options","questionCatalogReducer","index","filter","q","findIndex","arr","newIndex","direction","splice","JSON","parse","stringify","option","combineReducers","creator","questioncatalog","questioncatalogReducer","loggerMiddleware","createLogger","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","AmazonConnectConfiguratorComponent","props","createContactFlow","downloadJSON","ButtonGroup","size","Button","onClick","disabled","defaultProps","version","positionX","positionY","description","snapToGrid","propTypes","startUUID","PropTypes","string","isRequired","name","number","bool","EmptyContactFlow","modules","start","metadata","entryPointPosition","x","y","status","errorText","useDynamic","ContactFlowError","ownUUID","transitionUUID","id","branches","condition","transition","parameters","value","namespace","position","ContactFlowEnd","endPoint","errorUUID","resourceName","ContactFlowTransfer","ContactFlow","target","ContactFlowLogging","voiceType","ContactFlowVoice","ContactFlowPlayPrompt","ContactFlowRepeat","any","ContactFlowAttribute","arrayOf","ContactFlowInvokeExternal","dynamicParameters","forEach","i","dynamicParamter","dynamicMetadata","maxDigits","object","repeatUUID","transitionUUIDs","optionsUUIDMap","dispatch","func","ContactFlowUserInput","conditionMetadata","staticBranches","dynamicBranches","val","conditionMetadataObj","toString","category","contactFlowAttribute","conditionType","conditionValue","hasOwnProperty","part1","part2","concat","generateTextFromOptions","defaultText","greetingText","de","en","repeatText","defaultVoice","ContactFlowStaticStart","firstQuestionName","loggingUUUID","startErrorUUID","startEndUUID","startTransferUUID","voiceUUID","greetingUUID","staticStart","startModules","startError","startEnd","startTransfer","startLogging","startVoice","startGreeting","getState","ContactFlowStaticEnd","finishUUID","endErrorUUID","lambdaUUID","recomUUID","recomSpeechUUID","staticEnd","endModules","endError","finishLine","lambdaCall","recomAttr","recomVoice","ContactFlowStore","blyatUUID","useDynamicForEncryptionKeys","useDynamicForTerminatorDigits","countryCodePrefix","ContactFlowQuestion","uuidMap","xxxMap","offsetX","offsetY","console","log","transferUUIDs","endUUID","nextQuestionMap","someUUIDs","Array","from","Set","find","u","singleTransferUUID","contactFlowQuestion","contactFlowEnd","contactFlowRepeat","contactFlowError","uniqueTransferUUIDs","t","fooName","current","nextIndex","slice","length","nextQuestion","contactFlowTransfer","contactFlowUserInput","inputType","ContactFlowQuestionDate","contactFlowStore","CATEGORIES","QUESTION","QUESTIONNAIRE_ORDER","comment","scoreMap","QUESTIONNAIRE","createJSON","strings","keys","setCreatedJSON","createDateQuestion","createRadioQuestion","mapDispatchToProps","questionIDList","questionIDSet","qCount","contactFlow","contactFlowName","cf","jsonMap","zip","JSZip","file","generateAsync","then","content","fileDownload","connect","ownProps","CreatorComponent","getQuestionsAndGenerateJSONMock","availableLanguages","handleLanguageChange","bla","Container","ButtonToolbar","className","lang","variant","display","Accordion","Card","Toggle","as","Header","eventKey","Collapse","Body","Form","Group","controlId","Label","Control","rows","url","setLanguage","RadioOptionsComponent","InputGroup","FormControl","placeholder","Append","alert","varion","QuestionComponent","handleRemoveQuestion","handleMoveQuestion","total","defaultValue","RadioOptionComponent","AddRadioOptionComponent","handleAddRadioOption","handleUpateQuestion","addRadioOption","AddQuestionComponent","handleAddQuestion","questionTypes","handleQuestionTextChange","handleQuestionTypeChange","onChange","event","qtype","Check","inline","label","checked","uuidV4","addQuestion","resetNewQuestion","setQuestionText","setQuestionType","QuestionCatalogComponent","array","moveQuestion","App","to","exact","path","component","Creator","QuestionCatalog","preloadedState","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c25c4f1.chunk.js","sourcesContent":["export const SET_QUESTIONNAIRE_STRING_MAP = \"SET_QUESTIONNAIRE_STRING_MAP\"\r\nexport const SET_QUESTIONNAIRE_ORDER = \"SET_QUESTIONNAIRE_ORDER\"\r\nexport const SET_LANGUAGE = \"SET_LANGUAGE\"\r\nexport const SET_CREATED_JSON = \"SET_CREATED_JSON\"\r\nexport const SET_CREATED_AMAZON_CONNECT_CONFIG = \"SET_CREATED_AMAZON_CONNECT_CONFIG\"\r\nexport const SET_CREATED_AMAZON_CONNECT_DATA = \"SET_CREATED_AMAZON_CONNECT_DATA\"\r\nexport const ADD_CONTACT_FLOW = \"ADD_CONTACT_FLOW\"\r\nexport const ADD_UUID = \"ADD_UUID\"\r\nexport const ADD_KEY = \"ADD_KEY\"\r\nexport const SET_QUESTION_COUNT = \"SET_QUESTION_COUNT\"\r\n\r\nexport const setQuestionnaireStrings = stringMap => ({\r\n  type: SET_QUESTIONNAIRE_STRING_MAP,\r\n  payload: { stringMap }\r\n})\r\n\r\nexport const setQuestionnaireOrder = order => ({\r\n  type: SET_QUESTIONNAIRE_ORDER,\r\n  payload: { order }\r\n})\r\n\r\nexport const setLanguage = language => ({\r\n  type: SET_LANGUAGE,\r\n  payload: { language }\r\n})\r\n\r\nexport const setCreatedJSON = data => ({\r\n  type: SET_CREATED_JSON,\r\n  payload: { data }\r\n})\r\n\r\nexport const setCreatedAmazonConnectConfig = data => ({\r\n  type: SET_CREATED_AMAZON_CONNECT_CONFIG,\r\n  payload: { data }\r\n})\r\n\r\nexport const setAmazonConnectData = data => ({\r\n  type: SET_CREATED_AMAZON_CONNECT_DATA,\r\n  payload: { data }\r\n})\r\n\r\nexport const addContactFlow = contactFlow => ({\r\n  type: ADD_CONTACT_FLOW,\r\n  payload: { contactFlow }\r\n})\r\n\r\nexport const addUUID = uuid => ({\r\n  type: ADD_UUID,\r\n  payload: { uuid }\r\n})\r\n\r\nexport const addKey = key => ({\r\n  type: ADD_KEY,\r\n  payload: { key }\r\n})\r\n\r\nexport const setQuestionCount = questionCount => ({\r\n  type: SET_QUESTION_COUNT,\r\n  payload: { questionCount }\r\n})","import {\r\n  SET_QUESTIONNAIRE_ORDER,\r\n  SET_QUESTIONNAIRE_STRING_MAP,\r\n  SET_LANGUAGE,\r\n  SET_CREATED_JSON,\r\n  SET_CREATED_AMAZON_CONNECT_CONFIG,\r\n  SET_CREATED_AMAZON_CONNECT_DATA,\r\n  ADD_UUID,\r\n  ADD_KEY,\r\n  SET_QUESTION_COUNT\r\n} from \"./actions\"\r\n\r\nexport const initialState = {\r\n  order: undefined,\r\n  stringMap: {'de': undefined, 'en': undefined},\r\n  language: 'en',\r\n  chariteData: undefined,\r\n  connectConf: undefined,\r\n  uuidList: [],\r\n  lambdaKeys: {\"lambdaKeys\": []},\r\n  basename: \"generated_charite_data\"\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_QUESTIONNAIRE_ORDER:\r\n      return {\r\n        ...state,\r\n        order: action.payload.order\r\n      }\r\n    case SET_QUESTIONNAIRE_STRING_MAP:\r\n      return {\r\n        ...state,\r\n        stringMap: action.payload.stringMap\r\n      }\r\n    case SET_LANGUAGE:\r\n      return {\r\n        ...state,\r\n        language: action.payload.language\r\n      }\r\n    case SET_CREATED_JSON:\r\n      return {\r\n        ...state,\r\n        chariteData: action.payload.data\r\n      }\r\n    case SET_CREATED_AMAZON_CONNECT_CONFIG:\r\n      return {\r\n        ...state,\r\n        connectConf: action.payload.data\r\n      }\r\n    case SET_CREATED_AMAZON_CONNECT_DATA:\r\n      const connectConf = Object.assign({}, state.connectConf, action.payload.data)\r\n      return {\r\n        ...state,\r\n        connectConf\r\n      }\r\n    case ADD_UUID:\r\n      const uuidList = [...state.uuidList]\r\n      uuidList.push(action.payload.uuid)\r\n      return {\r\n        ...state,\r\n        uuidList\r\n      }\r\n    case ADD_KEY:\r\n      let lambdaKeys = state.lambdaKeys\r\n  \r\n      if (lambdaKeys[\"lambdaKeys\"].indexOf(action.payload.key) === -1) {\r\n        lambdaKeys[\"lambdaKeys\"].push(action.payload.key)\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        lambdaKeys\r\n      }\r\n    case SET_QUESTION_COUNT:\r\n      return {\r\n        ...state,\r\n        quesitonCount: action.payload.questionCount\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import creatorReducer from './reducers';\r\n\r\nexport default creatorReducer;","export const RESET_NEW_QUESTION = \"RESET_NEW_QUESTION\"\r\nexport const ADD_QUESTION = \"ADD_QUESTION\"\r\nexport const REMOVE_QUESTION = \"REMOVE_QUESTION\"\r\nexport const UPDATE_QUESTION = \"UPDATE_QUESTION\"\r\nexport const SET_QUESTION_TEXT = \"SET_QUESTION_TEXT\"\r\nexport const SET_QUESTION_TYPE = \"SET_QUESTION_TYPE\"\r\nexport const MOVE_QUESTION = \"MOVE_QUESTION\"\r\nexport const ADD_RADIO_OPTION = \"ADD_RADIO_OPTION\"\r\n\r\nexport const resetNewQuestion = question => ({\r\n  type: RESET_NEW_QUESTION,\r\n  payload: { question }\r\n})\r\n\r\nexport const addQuestion = question => ({\r\n  type: ADD_QUESTION,\r\n  payload: { question }\r\n})\r\n\r\nexport const removeQuestion = uuid => ({\r\n  type: REMOVE_QUESTION,\r\n  payload: { uuid }\r\n})\r\n\r\nexport const updateQuestion = question => ({\r\n  type: UPDATE_QUESTION,\r\n  payload: { question }\r\n})\r\n\r\nexport const setQuestionText = text => ({\r\n  type: SET_QUESTION_TEXT,\r\n  payload: { text }\r\n})\r\n\r\nexport const setQuestionType = type => ({\r\n  type: SET_QUESTION_TYPE,\r\n  payload: { type }\r\n})\r\n\r\nexport const moveQuestion = (uuid, direction) => ({\r\n  type: MOVE_QUESTION,\r\n  payload: { uuid, direction }\r\n})\r\n\r\nexport const addRadioOption = option => ({\r\n  type: ADD_RADIO_OPTION,\r\n  payload: { option }\r\n})","import { uuid } from \"uuidv4\"\r\nimport {\r\n  RESET_NEW_QUESTION,\r\n  ADD_QUESTION,\r\n  REMOVE_QUESTION,\r\n  UPDATE_QUESTION,\r\n  SET_QUESTION_TEXT,\r\n  SET_QUESTION_TYPE,\r\n  MOVE_QUESTION,\r\n  ADD_RADIO_OPTION\r\n} from \"./actions\"\r\n\r\nimport Sample from \"./sample\"\r\n\r\n\r\nexport const initialState = {\r\n  questions: Sample.map(s => Object.assign({}, s, {uuid: uuid()})),\r\n  newQuestion: {\r\n    text: \"\",\r\n    type: null,\r\n    options: []\r\n  }\r\n}\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n  let questions, newQuestion, index\r\n  switch (action.type) {\r\n    case RESET_NEW_QUESTION:\r\n      return {\r\n        ...state,\r\n        newQuestion: {\r\n          text: \"\",\r\n          type: \"date\"\r\n        }\r\n      }\r\n    case ADD_QUESTION:\r\n      questions = [...state.questions]\r\n      questions.push(action.payload.question)\r\n      return {\r\n        ...state,\r\n        questions\r\n      }\r\n    case REMOVE_QUESTION:\r\n      questions = [...state.questions].filter(q => q.uuid !== action.payload.uuid)\r\n      return {\r\n        ...state,\r\n        questions\r\n      }\r\n    case SET_QUESTION_TEXT:\r\n      newQuestion = Object.assign({}, state.newQuestion)\r\n      newQuestion.text = action.payload.text\r\n      return {\r\n        ...state,\r\n        newQuestion\r\n      }\r\n    case SET_QUESTION_TYPE:\r\n      newQuestion = Object.assign({}, state.newQuestion)\r\n      newQuestion.type = action.payload.type\r\n      return {\r\n        ...state,\r\n        newQuestion\r\n      }\r\n    case UPDATE_QUESTION:\r\n      questions = [...state.questions]\r\n      index = questions.findIndex(question => question.uuid === action.payload.question.uuid)\r\n      questions[index] = action.payload.question\r\n      return {\r\n        ...state,\r\n        questions\r\n      }\r\n    case MOVE_QUESTION:\r\n      // NOT WORKIN YET\r\n      let arr = [...state.questions]\r\n      index = arr.findIndex(question => question.uuid === action.payload.uuid)\r\n      let newIndex = index + action.payload.direction\r\n      arr.splice(newIndex, 0, arr.splice(index, 1)[0])\r\n      questions = arr.map(question => Object.assign({}, JSON.parse(JSON.stringify(question))))\r\n      return {\r\n        ...state,\r\n        questions\r\n      }\r\n    case ADD_RADIO_OPTION:\r\n      newQuestion = Object.assign({}, state.newQuestion)\r\n      newQuestion.options.push(action.payload.option)\r\n      return {\r\n        ...state,\r\n        newQuestion\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import questionCatalogReducer from './reducers';\r\n\r\nexport default questionCatalogReducer;","import { combineReducers } from \"redux\"\r\nimport creatorReducer from \"./app/creator/duck\"\r\nimport questioncatalogReducer  from \"./app/questioncatalog/duck\"\r\n\r\nexport default combineReducers({\r\n    creator: creatorReducer,\r\n    questioncatalog: questioncatalogReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst loggerMiddleware = createLogger();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function configureStore(preloadedState) {\r\n    return createStore(\r\n      rootReducer,\r\n      preloadedState,\r\n      composeEnhancers(applyMiddleware(thunkMiddleware, loggerMiddleware)),\r\n    )\r\n}","import React from \"react\"\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\"\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\nexport const defaultProps = {}\r\n\r\nexport const AmazonConnectConfiguratorComponent = props => {\r\n\r\n  const {\r\n    createContactFlow,\r\n    connectConf,\r\n    downloadJSON,\r\n    lambdaKeys,\r\n    language\r\n  } = props\r\n\r\n  return (\r\n\r\n   <ButtonGroup size=\"sm\">\r\n          <Button onClick={createContactFlow}>create Connect Config</Button>\r\n          <Button disabled={!connectConf} onClick={() => downloadJSON(connectConf, language)}>download Configs</Button>\r\n          <Button disabled={!connectConf} onClick={() => downloadJSON(lambdaKeys, language)}>download keys</Button>\r\n    </ButtonGroup>\r\n  )\r\n}\r\n\r\nAmazonConnectConfiguratorComponent.defaultProps = defaultProps\r\n\r\nexport default AmazonConnectConfiguratorComponent","import PropTypes from \"prop-types\"\r\n\r\nexport const defaultProps = {\r\n  version: \"1\",\r\n  positionX: 20,\r\n  positionY: 50,\r\n  description: \"generated ContactFlow\",\r\n  snapToGrid: true,\r\n}\r\n\r\nexport const propTypes = {\r\n  startUUID: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  version: PropTypes.string,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number,\r\n  description: PropTypes.string,\r\n  snapToGrid: PropTypes.bool\r\n}\r\n\r\n\r\nexport const EmptyContactFlow = ({\r\n  startUUID, name,\r\n  version = defaultProps.version,\r\n  positionX = defaultProps.positionX,\r\n  positionY = defaultProps.positionY,\r\n  description = defaultProps.description,\r\n  snapToGrid = defaultProps.snapToGrid\r\n  }) => {\r\n\r\n  return {\r\n    modules: [],\r\n    version: version,\r\n    type: \"contactFlow\",\r\n    start: startUUID,\r\n    metadata: {\r\n      entryPointPosition: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      snapToGrid: snapToGrid,\r\n      name: name,\r\n      description: description,\r\n      type: \"contactFlow\",\r\n      status: \"saved\"\r\n    }\r\n  }\r\n}\r\n\r\nEmptyContactFlow.propTypes = propTypes\r\nEmptyContactFlow.defaultProps = defaultProps\r\n\r\nexport default EmptyContactFlow\r\n\r\n","import PropTypes from \"prop-types\"\r\n\r\nexport const defaultProps = {\r\n  positionX: 220,\r\n  positionY: 420,\r\n  errorText: \"<speak>Irgendetwas ist schief gelaufen. Es tut uns Leid. Bitte versuchen Sie es später noch einmal.</speak>\",\r\n  useDynamic: false\r\n}\r\n\r\nexport const propTypes = {\r\n  startUUID: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number,\r\n  useDynamic: PropTypes.bool\r\n}\r\n\r\nexport const ContactFlowError = ({\r\n    ownUUID, transitionUUID,\r\n    errorText = defaultProps.errorText,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY,\r\n    useDynamic = defaultProps.useDynamic\r\n  }) => {\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"PlayPrompt\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"Text\",\r\n        value: errorText,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TextToSpeechType\",\r\n        value: \"ssml\"\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      useDynamic: useDynamic\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowError.propTypes = propTypes\r\nContactFlowError.defaultProps = defaultProps\r\n\r\nexport default ContactFlowError","import PropTypes from \"prop-types\"\r\n\r\nexport const defaultProps = {\r\n  positionX: 20,\r\n  positionY: 220\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number\r\n}\r\n\r\nexport const ContactFlowEnd = ({\r\n    ownUUID,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY\r\n  }) => {\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"Disconnect\",\r\n    branches: [],\r\n    parameters: [],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowEnd.propTypes = propTypes\r\nContactFlowEnd.defaultProps = defaultProps\r\n\r\nexport default ContactFlowEnd","import PropTypes from \"prop-types\"\r\n\r\n\r\n// TODO: find better name for endPoint, maybe even split it in parts\r\nexport const defaultProps = {\r\n  positionX: 20,\r\n  positionY: 600,\r\n  endPoint: \"\"\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  resourceName: PropTypes.string.isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number,\r\n  endPoint: PropTypes.string,\r\n  useDynamic: PropTypes.bool\r\n}\r\n\r\nexport const ContactFlowTransfer = ({\r\n    ownUUID, errorUUID, resourceName,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY,\r\n    endPoint = defaultProps.endPoint,\r\n    useDynamic = defaultProps.useDynamic\r\n  }) => {\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"Transfer\",\r\n    branches: [\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"ContactFlowId\",\r\n        value: endPoint,\r\n        resourceName: resourceName\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      useDynamic: useDynamic,\r\n      ContactFlow: {\r\n        id: endPoint,\r\n        text: resourceName\r\n      }\r\n    },\r\n    target: \"Flow\"\r\n  }\r\n}\r\n\r\nContactFlowTransfer.propTypes = propTypes\r\nContactFlowTransfer.defaultProps = defaultProps\r\n\r\nexport default ContactFlowTransfer","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  positionX: 220,\r\n  positionY: 20\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n}\r\n\r\nexport const ContactFlowLogging = ({\r\n    ownUUID, transitionUUID, errorUUID,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY\r\n  }) => {\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"SetLoggingBehavior\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"LoggingBehavior\",\r\n        value: \"Enable\"\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowLogging.propTypes = propTypes\r\nContactFlowLogging.defaultProps = defaultProps\r\n\r\nexport default ContactFlowLogging","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  voiceType: \"Vicki\",\r\n  positionX: 420,\r\n  positionY: 20\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  voiceType: PropTypes.string,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number\r\n}\r\n\r\nexport const ContactFlowVoice = ({\r\n    ownUUID, transitionUUID, errorUUID,\r\n    voiceType = defaultProps.voiceType,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY\r\n  }) => {\r\n\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"SetVoice\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"GlobalVoice\",\r\n        value: voiceType\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowVoice.propTypes = propTypes\r\nContactFlowVoice.defaultProps = defaultProps\r\n\r\nexport default ContactFlowVoice","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  positionX: 620,\r\n  positionY: 20,\r\n  useDynamic: false\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  positionX: PropTypes.string,\r\n  positionY: PropTypes.string,\r\n  useDynamic: PropTypes.bool\r\n}\r\n\r\nexport const ContactFlowPlayPrompt = ({\r\n    ownUUID, transitionUUID, errorUUID, text,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY,\r\n    useDynamic = defaultProps.useDynamic\r\n  }) => {\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"PlayPrompt\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"Text\",\r\n        value: text,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TextToSpeechType\",\r\n        value: \"ssml\"\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      useDynamic: useDynamic\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowPlayPrompt.propTypes = propTypes\r\nContactFlowPlayPrompt.defaultProps = defaultProps\r\n\r\nexport default ContactFlowPlayPrompt","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  text: \"<speak>Die Frage wird nun wiederholt.</speak>\",\r\n  useDynamic: false\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  positionX: PropTypes.number.isRequired,\r\n  positionY: PropTypes.number.isRequired,\r\n  text: PropTypes.string,\r\n  useDynamic: PropTypes.bool\r\n}\r\n\r\nexport const ContactFlowRepeat = ({\r\n    ownUUID, transitionUUID, positionX, positionY,\r\n    text = defaultProps.text,\r\n    useDynamic = defaultProps.useDynamic\r\n  }) => {\r\n  return {\r\n    id: ownUUID,\r\n    type: \"PlayPrompt\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"Text\",\r\n        value: text,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TextToSpeechType\",\r\n        value: \"ssml\"\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      useDynamic: useDynamic\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowRepeat.propTypes = propTypes\r\nContactFlowRepeat.defaultProps = defaultProps\r\n\r\nexport default ContactFlowRepeat","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  namespace: null\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n  key: PropTypes.string.isRequired,\r\n  positionX: PropTypes.number.isRequired,\r\n  positionY: PropTypes.number.isRequired\r\n}\r\n\r\n\r\nexport const ContactFlowAttribute = ({\r\n    ownUUID, errorUUID, transitionUUID, value, key, positionX, positionY,\r\n    namespace = defaultProps.namespace\r\n  }) => {\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"SetAttributes\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"Attribute\",\r\n        value: value,\r\n        key: key,\r\n        namespace: namespace\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowAttribute.propTypes = propTypes\r\nContactFlowAttribute.defaultProps = defaultProps\r\n\r\nexport default ContactFlowAttribute","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  positionX: 337,\r\n  positionY: 35,\r\n  endPoint: \"arn:aws:lambda:eu-west-2:260148551992:function:determineWordsForCovApp\"\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  lambdaKeys: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number,\r\n  endPoint: PropTypes.string\r\n}\r\n\r\nexport const ContactFlowInvokeExternal = ({\r\n    ownUUID, transitionUUID, errorUUID, lambdaKeys,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY,\r\n    endPoint = defaultProps.endPoint\r\n  }) => {\r\n\r\n  let dynamicParameters = []\r\n  let dynamicMetadata = {}\r\n\r\n  lambdaKeys.forEach((key, i) => {\r\n    let dynamicParamter = {\r\n      name: \"Parameter\",\r\n      key: key,\r\n      value: `$.Attributes.${key}`,\r\n      namespace: null\r\n    }\r\n    let dynamicMetadata = {[key]: false}\r\n    dynamicParameters.push(dynamicParamter)\r\n    dynamicMetadata[key] = false\r\n  })\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"InvokeExternalResource\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"FunctionArn\",\r\n        value: endPoint,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TimeLimit\",\r\n        value: \"8\"\r\n      },\r\n      ...dynamicParameters\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      dynamicMetadata: dynamicMetadata,\r\n      useDynamic: false\r\n    },\r\n    target: \"Lambda\"\r\n  }\r\n}\r\n\r\nContactFlowInvokeExternal.propTypes = propTypes\r\nContactFlowInvokeExternal.defaultProps = defaultProps\r\n\r\nexport default ContactFlowInvokeExternal","import PropTypes from \"prop-types\"\r\nimport { uuid } from \"uuidv4\"\r\nimport { ContactFlowAttribute } from \"./contactflowattribute\"\r\n\r\nexport const defaultProps = {\r\n  useDynamic: false,\r\n  maxDigits: \"1\"\r\n}\r\n\r\nexport const generateTextFromOptions = (question, language) => {\r\n  let text = `${question.text} <break time=\"1s\" />`\r\n\r\n  // quick n dirty. these stuff needs to be moved to state.\r\n  let part1 = language === 'de' ? 'Drücken Sie die' : 'Press'\r\n  let part2 = language === 'de' ? 'für' : 'for'\r\n\r\n  question.options.forEach((option, i) => {\r\n    //text = text.concat(`Drücken Sie die ${i} für ${option} <break time=\"1s\" />`)\r\n    text = text.concat(`${part1} ${i+1} ${part2} ${option} <break time=\"1s\" />`)\r\n  })\r\n  return `<speak>${text}</speak>`\r\n}\r\n\r\nexport const propTypes = {\r\n  question: PropTypes.object.isRequired,\r\n  ownUUID: PropTypes.string.isRequired,\r\n  repeatUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  transitionUUIDs: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  optionsUUIDMap: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  modules: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  positionX: PropTypes.number.isRequired,\r\n  positionY: PropTypes.number.isRequired,\r\n  dispatch: PropTypes.func.isRequired,\r\n  addKey: PropTypes.func.isRequired,\r\n  useDynamic: PropTypes.bool,\r\n  maxDigits: PropTypes.string\r\n}\r\n\r\nexport const ContactFlowUserInput = ({\r\n  question,\r\n  ownUUID,\r\n  repeatUUID,\r\n  errorUUID,\r\n  transitionUUIDs,\r\n  optionsUUIDMap,\r\n  modules,\r\n  positionX,\r\n  positionY,\r\n  dispatch,\r\n  addKey,\r\n  language,\r\n  useDynamic = defaultProps.useDynamic,\r\n  maxDigits = defaultProps.maxDigits\r\n}) => {\r\n\r\n  const conditionMetadata = []\r\n\r\n  let staticBranches = [\r\n    {\r\n      condition: \"Timeout\",\r\n      transition: repeatUUID\r\n    },\r\n    {\r\n      condition: \"NoMatch\",\r\n      transition: repeatUUID\r\n    },\r\n    {\r\n      condition: \"Error\",\r\n      transition: errorUUID\r\n    }\r\n  ]\r\n\r\n  /*  each dynamic branch needs a SetAttributes */\r\n  const dynamicBranches = question.options.map((option, i) => {\r\n    let conditionMetadataUUID = uuid()\r\n    let val = i + 1\r\n    const conditionMetadataObj = {\r\n      id: conditionMetadataUUID,\r\n      value: val.toString()\r\n    }\r\n    conditionMetadata.push(conditionMetadataObj)\r\n\r\n    let key = `${question.category}_${question.id}`\r\n    dispatch(addKey(key))\r\n\r\n    let contactFlowAttribute = ContactFlowAttribute({\r\n      ownUUID: optionsUUIDMap[i],\r\n      errorUUID: errorUUID,\r\n      key: key,\r\n      value: val,\r\n      positionX: positionX + 250,\r\n      positionY: positionY + i * 200,\r\n      transitionUUID: transitionUUIDs[i].uuid\r\n    })\r\n    modules.push(contactFlowAttribute)\r\n\r\n    return {\r\n      condition: \"Evaluate\",\r\n      conditionType: \"Equals\",\r\n      conditionValue: val.toString(),\r\n      transition: optionsUUIDMap[i]\r\n    }\r\n  })\r\n\r\n  const branches = [...dynamicBranches, ...staticBranches]\r\n\r\n  let useFullText = question.hasOwnProperty(\"options\") ? generateTextFromOptions(question, language) : `<speak>${question.text}</speak>`\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"GetUserInput\",\r\n    branches: branches,\r\n    parameters: [\r\n      {\r\n        name: \"Text\",\r\n        value: useFullText,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TextToSpeechType\",\r\n        value: \"ssml\"\r\n      },\r\n      {\r\n        name: \"Timeout\",\r\n        value: \"5\"\r\n      },\r\n      {\r\n        name: \"MaxDigits\",\r\n        value: maxDigits\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      conditionMetadata: conditionMetadata,\r\n      useDynamic: useDynamic\r\n    },\r\n    target: \"Digits\"\r\n  }\r\n}\r\n\r\nContactFlowUserInput.propTypes = propTypes\r\nContactFlowUserInput.defaultProps = defaultProps\r\n\r\nexport default ContactFlowUserInput","export const greetingText = {\r\n  de: `Deutsche Begrüßung`,\r\n  en: `<speak>Welcome to our service. Within a few minutes you will answer a questionnaire and receive specific recommendations for action.\r\n  At the end you will be given two words to write down. By mentioning these two words, practices and clinics can ask for their individual summary of the answers. You are free to decide to whom you entrust these two words.\r\n  Please note that the use of this service does not replace medical treatment or provide a diagnostic service.\r\n  Let us now begin with the questions.</speak>`\r\n}\r\n\r\nexport const repeatText = {\r\n  de: `<speak>Die Frage wird nun wiederholt.</spea>`,\r\n  en: `<speak>The question is now repeated.</speak>`\r\n}\r\n\r\nexport const errorText = {\r\n  de: `<speak>Irgendetwas ist schief gelaufen. Es tut uns Leid. Bitte versuchen Sie es später noch einmal.</speak>`,\r\n  en: `<speak>Something went wrong. We are sorry. Please try again later.</speak>`\r\n}\r\n\r\nexport const defaultVoice = {\r\n  de: \"Vicki\",\r\n  en: \"Joey\"\r\n}\r\n\r\nexport const defaultText = {\r\n  greetingText,\r\n  repeatText,\r\n  errorText,\r\n  defaultVoice\r\n}","import { uuid } from \"uuidv4\"\r\nimport PropTypes from \"prop-types\"\r\nimport { EmptyContactFlow } from \"./emptycontactflow\"\r\nimport { ContactFlowError } from \"./contactflowerror\"\r\nimport { ContactFlowEnd } from \"./contactflowend\"\r\nimport { ContactFlowTransfer } from \"./contactflowtransfer\"\r\nimport { ContactFlowLogging } from \"./contactflowlogging\"\r\nimport { ContactFlowVoice } from \"./contactflowvoice\"\r\nimport { ContactFlowPlayPrompt } from \"./contactflowplayprompt\"\r\nimport { defaultText } from \"../questions/defaultText\"\r\n\r\n\r\nexport const defaultProps = {\r\n  name: \"automated_charite_data_start\",\r\n  text: \"miau\"\r\n}\r\n\r\nexport const propTypes = {\r\n  name: PropTypes.string,\r\n  text: PropTypes.string\r\n}\r\n\r\n\r\nexport const ContactFlowStaticStart = ({\r\n    language,\r\n    firstQuestionName,\r\n    name = defaultProps.name,\r\n    text = defaultProps.text\r\n  }) => {\r\n    const loggingUUUID = uuid()\r\n    const startErrorUUID = uuid()\r\n    const startEndUUID = uuid()\r\n    const startTransferUUID = uuid()\r\n    const voiceUUID = uuid()\r\n    const greetingUUID = uuid()\r\n\r\n    const staticStart = EmptyContactFlow({\r\n      startUUID: loggingUUUID,\r\n      name: name\r\n    })\r\n    const startModules = []\r\n\r\n    const startError = ContactFlowError({\r\n      ownUUID: startErrorUUID,\r\n      transitionUUID: startEndUUID,\r\n      errorText: defaultText.errorText[language]\r\n    })\r\n    startModules.push(startError)\r\n\r\n    const startEnd = ContactFlowEnd({\r\n      ownUUID: startEndUUID\r\n    })\r\n    startModules.push(startEnd)\r\n\r\n    const startTransfer = ContactFlowTransfer({\r\n      ownUUID: startTransferUUID,\r\n      transitionUUID: voiceUUID,\r\n      errorUUID: startErrorUUID,\r\n      resourceName: firstQuestionName\r\n    })\r\n    startModules.push(startTransfer)\r\n\r\n    const startLogging = ContactFlowLogging({\r\n      ownUUID: loggingUUUID,\r\n      transitionUUID: voiceUUID,\r\n      errorUUID: startErrorUUID\r\n    })\r\n    startModules.push(startLogging)\r\n\r\n    const startVoice = ContactFlowVoice({\r\n      ownUUID: voiceUUID,\r\n      transitionUUID: greetingUUID,\r\n      errorUUID: startErrorUUID,\r\n      voiceType: defaultText.defaultVoice[language]\r\n    })\r\n    startModules.push(startVoice)\r\n\r\n    const startGreeting = ContactFlowPlayPrompt({\r\n      ownUUID: greetingUUID,\r\n      transitionUUID: startTransferUUID,\r\n      errorUUID: startErrorUUID,\r\n      text: text\r\n    })\r\n    startModules.push(startGreeting)\r\n\r\n    staticStart.modules = startModules\r\n\r\n    return staticStart\r\n}\r\n\r\nContactFlowStaticStart.propTypes = propTypes\r\nContactFlowStaticStart.defaultProps = defaultProps\r\n\r\nexport default ContactFlowStaticStart","import PropTypes from \"prop-types\"\r\nimport { uuid } from \"uuidv4\"\r\nimport { EmptyContactFlow } from \"./emptycontactflow\"\r\nimport { ContactFlowError } from \"./contactflowerror\"\r\nimport { ContactFlowEnd } from \"./contactflowend\"\r\nimport { ContactFlowInvokeExternal } from \"./contactflowinvokeexternal\"\r\nimport { ContactFlowAttribute } from \"./contactflowattribute\"\r\nimport { ContactFlowPlayPrompt } from \"./contactflowplayprompt\"\r\n\r\nexport const defaultProps = {\r\n  name: \"generated_charite_data_29\"\r\n}\r\n\r\nexport const propTypes = {\r\n  getState: PropTypes.func.isRequired,\r\n  name: PropTypes.string\r\n}\r\n\r\n\r\nexport const ContactFlowStaticEnd = ({\r\n    getState,\r\n    name = defaultProps.name\r\n  }) => {\r\n\r\n    const finishUUID = uuid()\r\n    const endErrorUUID = uuid()\r\n    const lambdaUUID = uuid()\r\n    const recomUUID = uuid()\r\n    const recomSpeechUUID = uuid()\r\n\r\n    const staticEnd = EmptyContactFlow({\r\n      startUUID: lambdaUUID,\r\n      name: name\r\n    })\r\n    const endModules = []\r\n\r\n    const endError = ContactFlowError({\r\n      ownUUID: endErrorUUID,\r\n      transitionUUID: finishUUID\r\n    })\r\n    endModules.push(endError)\r\n\r\n    const finishLine = ContactFlowEnd({ownUUID: finishUUID})\r\n    endModules.push(finishLine)\r\n\r\n    const finalState = getState()\r\n    const lambdaKeys = finalState.creator.lambdaKeys.lambdaKeys\r\n\r\n    const lambdaCall = ContactFlowInvokeExternal({\r\n      ownUUID: lambdaUUID,\r\n      errorUUID: endErrorUUID,\r\n      lambdaKeys: lambdaKeys,\r\n      transitionUUID: recomUUID\r\n    })\r\n    endModules.push(lambdaCall)\r\n\r\n    const recomAttr = ContactFlowAttribute({\r\n      ownUUID: recomUUID,\r\n      errorUUID: endErrorUUID,\r\n      value: \"$.External.recommendation\",\r\n      key: \"recommendation\",\r\n      positionX: 400,\r\n      positionY: 400,\r\n      transitionUUID: recomSpeechUUID\r\n    })\r\n    endModules.push(recomAttr)\r\n\r\n    const recomVoice = ContactFlowPlayPrompt({\r\n      ownUUID: recomSpeechUUID,\r\n      transitionUUID: finishUUID,\r\n      errorUUID: endErrorUUID,\r\n      text: \"$.External.word1 und $.External.word2\"\r\n    })\r\n    endModules.push(recomVoice)\r\n\r\n    staticEnd.modules = endModules\r\n\r\n    return staticEnd\r\n}\r\n\r\nContactFlowStaticEnd.propTypes = propTypes\r\nContactFlowStaticEnd.defaultProps = defaultProps\r\n\r\nexport default ContactFlowStaticEnd","import PropTypes from \"prop-types\"\r\nimport { uuid } from \"uuidv4\"\r\nimport { EmptyContactFlow } from \"./emptycontactflow\"\r\nimport { ContactFlowEnd } from \"./contactflowend\"\r\nimport { ContactFlowRepeat } from \"./contactflowrepeat\"\r\nimport { ContactFlowError } from \"./contactflowerror\"\r\nimport { ContactFlowTransfer } from \"./contactflowtransfer\"\r\nimport { ContactFlowUserInput } from \"./contactflowuserinput\"\r\n\r\nexport const defaultProps = {\r\n  positionX: 820,\r\n  positionY: 20,\r\n  offsetX: 0,\r\n  offsetY: 200\r\n}\r\n\r\nexport const propTypes = {\r\n  dispatch: PropTypes.func.isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number\r\n}\r\n\r\nexport const ContactFlowQuestion = ({\r\n    language, errorText, repeatText, index,\r\n    dispatch, uuidMap, xxxMap, question, addKey, name,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY,\r\n    offsetX = defaultProps.offsetX,\r\n    offsetY = defaultProps.offsetY\r\n  }) => {\r\n\r\n      console.log(`hello question ${question.id} has index ${index}`)\r\n\r\n      const endUUID = uuid()\r\n      const repeatUUID = uuid()\r\n      const errorUUID = uuid()\r\n\r\n      let transferUUIDs \r\n      if (question.nextQuestionMap !== undefined) {\r\n        let someUUIDs = Array.from(new Set(question.nextQuestionMap.map(q => {\r\n          return {uuid: uuid(), key: q}\r\n        })))\r\n        transferUUIDs = question.nextQuestionMap.map(q => {\r\n          return someUUIDs.find(u => u.key === q)\r\n        })\r\n      }\r\n      else {\r\n        let singleTransferUUID = {uuid: uuid(), key: question.id}\r\n        transferUUIDs = question.options.map(q => singleTransferUUID)\r\n      }\r\n\r\n      const contactFlowQuestion = EmptyContactFlow({\r\n        name: name,\r\n        startUUID: uuidMap[question.id],\r\n        description: question.id\r\n      })\r\n      const modules = []\r\n\r\n      const contactFlowEnd = ContactFlowEnd({ownUUID:endUUID})\r\n      modules.push(contactFlowEnd)\r\n\r\n      const contactFlowRepeat = ContactFlowRepeat({\r\n        ownUUID: repeatUUID,\r\n        transitionUUID: uuidMap[question.id],\r\n        positionX: positionX + offsetX,\r\n        positionY: positionY + offsetY,\r\n        text: repeatText\r\n      })\r\n      modules.push(contactFlowRepeat)\r\n\r\n      const contactFlowError = ContactFlowError({\r\n        ownUUID: errorUUID,\r\n        transitionUUID: endUUID,\r\n        errorText: errorText\r\n      })\r\n      modules.push(contactFlowError)\r\n\r\n      const uniqueTransferUUIDs = Array.from(new Set(transferUUIDs))\r\n\r\n      uniqueTransferUUIDs.forEach(t => {\r\n\r\n        let current = xxxMap.find(u => u.key === t.key)\r\n        let currentIndex = xxxMap.indexOf(current)\r\n        let nextIndex = currentIndex + 1\r\n        // TODO: clean up this mess....\r\n        let fooName\r\n        if(question.id === xxxMap.slice(-1)[0].key) {\r\n          fooName = \"end\"\r\n        } else {\r\n          // uniqueTransferUUIDs only 1 element? use xxxMap[next] else t.key\r\n          fooName =  uniqueTransferUUIDs.length === 1 ? xxxMap[nextIndex].key : t.key\r\n        }\r\n  \r\n        let resourceName\r\n        if (fooName !== \"end\") {\r\n          let nextQuestion = xxxMap.find(x => x.key === fooName)\r\n          fooName = xxxMap.indexOf(nextQuestion)\r\n          resourceName = `generated_charite_data_${fooName}`\r\n        } else {\r\n          // remove this. its a workaround for 100 max contactflows @ amazon connect\r\n          resourceName = \"automated_charite_data_end\"\r\n        }\r\n        console.log(`${question.id} leads to question number ${fooName}`)\r\n\r\n        const contactFlowTransfer = ContactFlowTransfer({\r\n          ownUUID: t.uuid,\r\n          errorUUID: errorUUID,\r\n          resourceName: resourceName//`generated_charite_data_${fooName}`//`question_${fooName}_${language}`\r\n        })\r\n        modules.push(contactFlowTransfer)\r\n      })\r\n\r\n      let optionsUUIDMap = {}\r\n\r\n      question.options.forEach((option,i) => {\r\n        optionsUUIDMap[i] = uuid()\r\n      })\r\n\r\n\r\n      const contactFlowUserInput = ContactFlowUserInput({\r\n        question: question,\r\n        ownUUID: uuidMap[question.id],\r\n        repeatUUID: repeatUUID,\r\n        errorUUID: errorUUID,\r\n        transitionUUIDs: transferUUIDs,\r\n        optionsUUIDMap: optionsUUIDMap,\r\n        modules: modules,\r\n        positionX: positionX,\r\n        positionY: positionY,\r\n        dispatch: dispatch,\r\n        addKey: addKey,\r\n        language: language,\r\n        maxDigits: question.inputType === \"radio\" ? \"1\" : \"3\",\r\n      })\r\n      modules.push(contactFlowUserInput)\r\n\r\n      contactFlowQuestion.modules = modules\r\n\r\n    return contactFlowQuestion\r\n}","//import PropTypes from \"prop-types\"\r\nimport { uuid } from \"uuidv4\"\r\nimport { ContactFlowAttribute } from \"./contactflowattribute\"\r\n\r\nexport const defaultProps = {\r\n  positionX: 800,\r\n  positionY: 800,\r\n  maxDigits: 3\r\n}\r\n\r\nexport const propTypes = {\r\n}\r\n\r\nexport const generateTextFromOptions = question => {\r\n  let text = `${question.text} <break time=\"1s\" />`\r\n  return `<speak>${text}</speak>`\r\n}\r\n\r\n\r\nexport const ContactFlowStore = ({\r\n  question,\r\n  ownUUID,\r\n  errorUUID,\r\n  transitionUUIDs,\r\n  modules,\r\n  positionX,\r\n  positionY,\r\n  dispatch,\r\n  addKey,\r\n  //useDynamic = defaultProps.useDynamic,\r\n  maxDigits = defaultProps.maxDigits\r\n}) => {\r\n  let key = `${question.category}_${question.id}`\r\n  dispatch(addKey(key))\r\n\r\n  const blyatUUID = uuid()\r\n\r\n  let contactFlowAttribute = ContactFlowAttribute({\r\n    ownUUID: blyatUUID,\r\n    errorUUID: errorUUID,\r\n    key: key,\r\n    value: \"Stored customer input\",\r\n    positionX: positionX + 250,\r\n    positionY: positionY + 0 * 200,\r\n    transitionUUID: transitionUUIDs[0].uuid,\r\n    namespace: \"System\"\r\n  })\r\n  modules.push(contactFlowAttribute)\r\n  let useFullText = generateTextFromOptions(question)\r\n  //console.log(useFullText)\r\n  const wtf = {\r\n    id: ownUUID,\r\n    type: \"StoreUserInput\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: blyatUUID//transitionUUIDs[0].uuid\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"Text\",\r\n        value: useFullText,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TextToSpeechType\",\r\n        value: \"ssml\"\r\n      },\r\n      {\r\n        name: \"CustomerInputType\",\r\n        value: \"Custom\"\r\n      },\r\n      {\r\n        name: \"Timeout\",\r\n        value: \"5\"\r\n      },\r\n      {\r\n        name: \"MaxDigits\",\r\n        value: maxDigits\r\n      },\r\n      {\r\n        name: \"EncryptEntry\",\r\n        value: false\r\n      },\r\n      {\r\n        name: \"DisableCancel\",\r\n        value: false\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      useDynamic: false,\r\n      useDynamicForEncryptionKeys: true,\r\n      useDynamicForTerminatorDigits: false,\r\n      countryCodePrefix: \"+1\"\r\n    }\r\n  }\r\n  return wtf\r\n}\r\n\r\nContactFlowStore.propTypes = propTypes\r\nContactFlowStore.defaultProps = defaultProps\r\n\r\nexport default ContactFlowStore","import PropTypes from \"prop-types\"\r\nimport { uuid } from \"uuidv4\"\r\nimport { EmptyContactFlow } from \"./emptycontactflow\"\r\nimport { ContactFlowEnd } from \"./contactflowend\"\r\nimport { ContactFlowRepeat } from \"./contactflowrepeat\"\r\nimport { ContactFlowError } from \"./contactflowerror\"\r\nimport { ContactFlowTransfer } from \"./contactflowtransfer\"\r\nimport { ContactFlowStore } from \"./contactflowstore\"\r\n\r\nexport const defaultProps = {\r\n  positionX: 820,\r\n  positionY: 20\r\n}\r\n\r\nexport const propTypes = {\r\n  dispatch: PropTypes.func.isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number\r\n}\r\n\r\nexport const ContactFlowQuestionDate = ({\r\n    language, errorText, repeatText, index,\r\n    dispatch, uuidMap, xxxMap, question, addKey, name,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY\r\n  }) => {\r\n\r\n      console.log(`hello question ${question.id} has index ${index}`, name)\r\n      const endUUID = uuid()\r\n      const repeatUUID = uuid()\r\n      const errorUUID = uuid()\r\n\r\n      const transferUUIDs = [{uuid: uuid(), key: question.id}]\r\n\r\n      const contactFlowQuestion = EmptyContactFlow({\r\n        name: name,\r\n        startUUID: uuidMap[question.id],\r\n        errorText: errorText,\r\n        description: question.id\r\n      })\r\n      const modules = []\r\n\r\n      const contactFlowEnd = ContactFlowEnd({ownUUID:endUUID})\r\n      modules.push(contactFlowEnd)\r\n\r\n      const contactFlowRepeat = ContactFlowRepeat({\r\n        ownUUID: repeatUUID,\r\n        transitionUUID: uuidMap[question.id],\r\n        positionX: positionX,\r\n        positionY: positionY + 200,\r\n        text: repeatText\r\n      })\r\n      modules.push(contactFlowRepeat)\r\n\r\n      const contactFlowError = ContactFlowError({\r\n        ownUUID: errorUUID,\r\n        transitionUUID: endUUID\r\n      })\r\n      modules.push(contactFlowError)\r\n\r\n      const uniqueTransferUUIDs = Array.from(new Set(transferUUIDs))\r\n\r\n      uniqueTransferUUIDs.forEach(t => {\r\n\r\n        let current = xxxMap.find(u => u.key === t.key)\r\n        let currentIndex = xxxMap.indexOf(current)\r\n        let nextIndex = currentIndex + 1\r\n        // TODO: clean up this mess....\r\n        let fooName\r\n        if(question.id === xxxMap.slice(-1)[0].key) {\r\n          fooName = \"end\"\r\n        } else {\r\n          // uniqTransferUUIDs only 1 element? use xxxMap[next] else t.key\r\n          fooName =  uniqueTransferUUIDs.length === 1 ? xxxMap[nextIndex].key : t.key\r\n        } \r\n        \r\n        if (fooName !== \"end\") {\r\n          let nextQuestion = xxxMap.find(x => x.key === fooName)\r\n          fooName = xxxMap.indexOf(nextQuestion)\r\n        }\r\n        console.log(`${question.id} leads to question number ${fooName}`)\r\n\r\n        const contactFlowTransfer = ContactFlowTransfer({\r\n          ownUUID: t.uuid,\r\n          errorUUID: errorUUID,\r\n          resourceName: `generated_charite_data_${fooName}`//`question_${fooName}_${language}`\r\n        })\r\n        modules.push(contactFlowTransfer)\r\n      })\r\n\r\n      const contactFlowStore = ContactFlowStore({\r\n        question: question,\r\n        ownUUID: uuidMap[question.id],\r\n        errorUUID: errorUUID,\r\n        transitionUUIDs: transferUUIDs,\r\n        modules: modules,\r\n        positionX: positionX,\r\n        positionY: positionY,\r\n        dispatch: dispatch,\r\n        addKey: addKey\r\n        //maxDigits: question.inputType === \"radio\" ? \"1\" : \"3\"\r\n      })\r\n      modules.push(contactFlowStore)\r\n\r\n      contactFlowQuestion.modules = modules\r\n\r\n    return contactFlowQuestion\r\n}","import { EmptyContactFlow } from \"./emptycontactflow\"\r\nimport { ContactFlowError } from \"./contactflowerror\"\r\nimport { ContactFlowEnd } from \"./contactflowend\"\r\nimport { ContactFlowTransfer } from \"./contactflowtransfer\"\r\nimport { ContactFlowLogging } from \"./contactflowlogging\"\r\nimport { ContactFlowVoice } from \"./contactflowvoice\"\r\nimport { ContactFlowPlayPrompt} from \"./contactflowplayprompt\"\r\nimport { ContactFlowRepeat } from \"./contactflowrepeat\"\r\nimport { ContactFlowAttribute } from \"./contactflowattribute\"\r\nimport { ContactFlowInvokeExternal } from \"./contactflowinvokeexternal\"\r\nimport { ContactFlowUserInput } from \"./contactflowuserinput\"\r\nimport { ContactFlowStaticStart } from \"./contactflowstaticstart\"\r\nimport { ContactFlowStaticEnd } from \"./contactflowstaticend\"\r\nimport { ContactFlowQuestion } from \"./contactflowquestion\"\r\nimport { ContactFlowQuestionDate } from \"./contactflowquestiondate\"\r\nimport { ContactFlowStore } from \"./contactflowstore\"\r\n\r\nexport const ContactFlow = {\r\n  EmptyContactFlow,\r\n  ContactFlowError,\r\n  ContactFlowEnd,\r\n  ContactFlowTransfer,\r\n  ContactFlowLogging,\r\n  ContactFlowVoice,\r\n  ContactFlowPlayPrompt,\r\n  ContactFlowRepeat,\r\n  ContactFlowAttribute,\r\n  ContactFlowInvokeExternal,\r\n  ContactFlowUserInput,\r\n  ContactFlowStaticStart,\r\n  ContactFlowStaticEnd,\r\n  ContactFlowQuestion,\r\n  ContactFlowQuestionDate,\r\n  ContactFlowStore\r\n}\r\n\r\nexport default ContactFlow\r\n","//import { Guard, Condition, Disjunction } from './guard';\r\n\r\n/* export type Question = {\r\n  id: string;\r\n  category: string;\r\n  comment?: string;\r\n  text: string;\r\n  inputType: 'radio' | 'date';\r\n  options?: string[];\r\n  nextQuestionMap?: string | string[];\r\n  scoreMap?: number[];\r\n  guard?: Guard;\r\n}; */\r\n\r\nexport const CATEGORIES = {\r\n  PERSONAL: 'personalInfo',\r\n  CONTACT: 'contact',\r\n  SYMPTOMS: 'symptoms',\r\n  RESPIRATORY_SYMPTOMS: 'respiratorySymptoms',\r\n  ILLNESS: 'illnesses',\r\n  MEDICATION: 'medication',\r\n};\r\n\r\nexport const QUESTION = {\r\n  AGE: 'P0',\r\n  ABOVE_65: 'P1',\r\n  LIVING_SITUATION: 'P2',\r\n  CARING: 'P3',\r\n  WORKSPACE: 'P4',\r\n  CONTACT_DATE: 'CZ',\r\n  OUT_OF_BREATH: 'SB',\r\n  SYMPTOM_DATE: 'SZ',\r\n};\r\n\r\nexport const QUESTIONNAIRE_ORDER = [\r\n  {\r\n    id: QUESTION.AGE,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P0_text',\r\n    inputType: 'radio',\r\n    options: [\r\n      'q_P0_option0',\r\n      'q_P0_option1',\r\n      'q_P0_option2',\r\n      'q_P0_option3',\r\n      'q_P0_option4',\r\n      'q_P0_option5',\r\n    ],\r\n    nextQuestionMap: ['P2', 'P2', 'P2', 'P1', 'P2', 'P2'],\r\n  },\r\n  {\r\n    id: QUESTION.ABOVE_65,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P1_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n  },\r\n  {\r\n    id: QUESTION.LIVING_SITUATION,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P2_text',\r\n    inputType: 'radio',\r\n    options: ['q_P2_option0', 'q_P2_option1'],\r\n  },\r\n  {\r\n    id: QUESTION.CARING,\r\n    category: CATEGORIES.PERSONAL,\r\n    comment: 'q_P3_comment',\r\n    text: 'q_P3_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n  },\r\n  {\r\n    id: QUESTION.WORKSPACE,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P4_text',\r\n    inputType: 'radio',\r\n    options: ['q_P4_option0', 'q_P4_option1', 'q_P4_option2'],\r\n  },\r\n  {\r\n    id: 'P5',\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P5_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n  },\r\n  {\r\n    id: 'P6',\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P6_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'C0',\r\n    category: CATEGORIES.CONTACT,\r\n    comment: 'q_C0_comment',\r\n    text: 'q_C0_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    nextQuestionMap: ['CZ', 'S0'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: QUESTION.CONTACT_DATE,\r\n    category: CATEGORIES.CONTACT,\r\n    text: 'q_CZ_text',\r\n    inputType: 'date',\r\n  },\r\n  {\r\n    id: 'S0',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    comment: null,\r\n    text: 'q_S0_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    nextQuestionMap: ['S2', 'S1'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S1',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    comment: null,\r\n    text: 'q_S1_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    nextQuestionMap: ['S2', 'S3'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S2',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    comment: null,\r\n    text: 'q_S2_text',\r\n    inputType: 'radio',\r\n    options: [\r\n      '',\r\n      'q_S2_option1',\r\n      'q_S2_option2',\r\n      'q_S2_option3',\r\n      'q_S2_option4',\r\n      'q_S2_option5',\r\n      'q_S2_option6',\r\n      'q_S2_option7',\r\n    ],\r\n  },\r\n  {\r\n    id: 'S3',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_S3_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S4',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_S4_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S5',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_S5_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S6',\r\n    category: CATEGORIES.RESPIRATORY_SYMPTOMS,\r\n    comment: 'q_S6_comment',\r\n    text: 'q_S6_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S7',\r\n    category: CATEGORIES.RESPIRATORY_SYMPTOMS,\r\n    comment: 'q_S7_comment',\r\n    text: 'q_S7_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S8',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    comment: 'q_S8_comment',\r\n    text: 'q_S8_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S9',\r\n    category: CATEGORIES.RESPIRATORY_SYMPTOMS,\r\n    text: 'q_S9_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'SA',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_SA_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: QUESTION.OUT_OF_BREATH,\r\n    category: CATEGORIES.RESPIRATORY_SYMPTOMS,\r\n    comment: 'q_SB_comment',\r\n    text: 'q_SB_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'SC',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_SC_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: QUESTION.SYMPTOM_DATE,\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_SZ_text',\r\n    inputType: 'date'/* ,\r\n    guard: new Disjunction([\r\n      new Condition(CATEGORIES.SYMPTOMS, 1, null),\r\n      new Condition(CATEGORIES.RESPIRATORY_SYMPTOMS, 1, null),\r\n    ]), */\r\n  },\r\n  {\r\n    id: 'D0',\r\n    category: CATEGORIES.ILLNESS,\r\n    text: 'q_D0_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'D1',\r\n    category: CATEGORIES.ILLNESS,\r\n    text: 'q_D1_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'D2',\r\n    category: CATEGORIES.ILLNESS,\r\n    text: 'q_D2_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'D3',\r\n    category: CATEGORIES.ILLNESS,\r\n    text: 'q_D3_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'M0',\r\n    category: CATEGORIES.MEDICATION,\r\n    text: 'q_M0_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'M1',\r\n    category: CATEGORIES.MEDICATION,\r\n    comment: 'q_M1_comment',\r\n    text: 'q_M1_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'M2',\r\n    category: CATEGORIES.MEDICATION,\r\n    text: 'q_M2_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n  },\r\n];\r\n\r\nexport const QUESTIONNAIRE_ORDER_SMALL = [\r\n  {\r\n    id: QUESTION.AGE,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P0_text',\r\n    inputType: 'radio',\r\n    options: [\r\n      'q_P0_option0',\r\n      'q_P0_option1',\r\n      'q_P0_option2',\r\n      'q_P0_option3',\r\n      'q_P0_option4',\r\n      'q_P0_option5',\r\n    ],\r\n    nextQuestionMap: ['P2', 'P2', 'P2', 'P1', 'P2', 'P2'],\r\n  },\r\n  {\r\n    id: QUESTION.ABOVE_65,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P1_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n  },\r\n  {\r\n    id: QUESTION.LIVING_SITUATION,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P2_text',\r\n    inputType: 'radio',\r\n    options: ['q_P2_option0', 'q_P2_option1'],\r\n  },\r\n  {\r\n    id: QUESTION.CONTACT_DATE,\r\n    category: CATEGORIES.CONTACT,\r\n    text: 'q_CZ_text',\r\n    inputType: 'date',\r\n  }\r\n]\r\n","\r\nimport QUESTIONNAIRE_DE from \"./de\"\r\nimport QUESTIONNAIRE_EN from \"./en\"\r\n\r\nexport const QUESTIONNAIRE = {\r\n  de: QUESTIONNAIRE_DE,\r\n  en: QUESTIONNAIRE_EN\r\n}","//import fetch from \"cross-fetch\"\r\nimport { uuid } from \"uuidv4\"\r\nimport fileDownload from \"js-file-download\"\r\nimport JSZip from \"jszip\"\r\nimport {\r\n  setQuestionnaireStrings,\r\n  setQuestionnaireOrder,\r\n  setLanguage,\r\n  setCreatedJSON,\r\n  setAmazonConnectData,\r\n  addKey,\r\n  setQuestionCount\r\n} from \"./actions\"\r\n\r\nimport cf from \"./amazon-connect/contactflow\"\r\nimport { defaultText } from \"./questions/defaultText\"\r\n\r\nimport { QUESTIONNAIRE_ORDER } from \"./foo\" /* \"./questionnaire_order\" */\r\nimport { QUESTIONNAIRE } from  \"./bar\" /* \"./questionnaire_strings\" */\r\n\r\n\r\n// TODO: implement a real fetch from  https://covapp.charite.de/\r\nexport const fetchData = () => {\r\n    (async () => {\r\n      try {\r\n        const res = await fetch(\"https://covapp.charite.de/\");\r\n        \r\n        if (res.status >= 400) {\r\n          throw new Error(\"Bad response from server\");\r\n        }\r\n        \r\n        const user = await res.text();\r\n        console.log(res)\r\n        //console.log(url)\r\n        console.log(user);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    })()\r\n}\r\n\r\nexport const fetchDataMock = url => {\r\n  return dispatch => {\r\n    if (url === 'stringMap') {\r\n      dispatch(setQuestionnaireStrings(QUESTIONNAIRE))\r\n    } else {\r\n      dispatch(setQuestionnaireOrder(QUESTIONNAIRE_ORDER))\r\n    }\r\n  }\r\n}\r\n\r\nexport const getQuestionsAndGenerateJSONMock = url => {\r\n  return dispatch => {\r\n    dispatch(setQuestionnaireStrings(QUESTIONNAIRE))\r\n    dispatch(setQuestionnaireOrder(QUESTIONNAIRE_ORDER))\r\n    dispatch(createJSON())\r\n  }\r\n}\r\n\r\nexport const handleLanguageChange = language => {\r\n  return dispatch => {\r\n    dispatch(setLanguage(language))\r\n  }\r\n}\r\n\r\nexport const createRadioQuestion = (question, strings) => {\r\n  let options = question.options.map(option => strings[option])\r\n  return Object.assign({}, question, {\r\n    id: question.id,\r\n    text: strings[question.text],\r\n    options: options,\r\n    nextQuestionMap: question.nextQuestionMap,\r\n    comment: strings[question.comment]\r\n  })\r\n}\r\n\r\nexport const createDateQuestion = (question, strings) => {\r\n  return Object.assign({}, question, {\r\n    id: question.id,\r\n    text: strings[question.text]\r\n  })\r\n}\r\n\r\nexport const createJSON = () => {\r\n  return (dispatch, getState) => {\r\n    const state = getState()\r\n    const { order, stringMap, language } = state.creator\r\n    const strings = stringMap[language].keys\r\n    const data = order.map(question => {\r\n\r\n      if (question.inputType === 'date') {\r\n        return createDateQuestion(question, strings)\r\n      } else {\r\n        return createRadioQuestion(question, strings)\r\n      }\r\n    })\r\n    dispatch(setCreatedJSON(data))\r\n  }\r\n}\r\n\r\nexport const downloadJSON = (jsonMap, language) => {\r\n  const zip = new JSZip();\r\n \r\n  Object.keys(jsonMap).forEach((key, x) => {\r\n      zip.file(`${key}.json`, JSON.stringify(jsonMap[key], null, 4))\r\n\r\n  })\r\n  zip.generateAsync({type:\"blob\"}).then(function(content) {\r\n    fileDownload(content, \"example.zip\")\r\n  })\r\n  \r\n  return {type: ''}\r\n}\r\n\r\nexport const handleQuestionCount = questionCount => {\r\n  return dispatch => {\r\n    dispatch(setQuestionCount(questionCount))\r\n  }\r\n}\r\n\r\nexport const createContactFlow = () => {\r\n  return (dispatch, getState) => {\r\n    let state = getState()\r\n\r\n    const basename = state.creator.basename\r\n    const questions = state.creator.chariteData\r\n    const language = state.creator.language\r\n\r\n    const questionIDList = []\r\n    questions.forEach(question => {\r\n      questionIDList.push(question.id)\r\n    })\r\n\r\n    const questionIDSet = new Set(questionIDList)\r\n    const uuidMap = {}\r\n    const xxxMap = Array.from(new Set(questionIDList.map(q => {return {key: q, uuid: uuid()}})))\r\n\r\n    // Set sadly has no map method :(\r\n    questionIDSet.forEach(id => {\r\n      uuidMap[id] =  uuid()\r\n    })\r\n\r\n    let qCount = 0\r\n\r\n    questions.forEach((question, i) => {\r\n      \r\n      const contactFlowName = `${basename}_${i}`//`question_${i}_${language}`\r\n      let contactFlow\r\n      if (question.inputType === 'radio') {\r\n        contactFlow = cf.ContactFlowQuestion({\r\n          name: contactFlowName,\r\n          getState: getState,\r\n          uuidMap: uuidMap,\r\n          xxxMap: xxxMap,\r\n          question: question,\r\n          index: i,\r\n          addKey: addKey,\r\n          dispatch: dispatch,\r\n          language: language,\r\n          errorText: defaultText.errorText[language],\r\n          repeatText: defaultText.repeatText[language]\r\n        })\r\n      } else {\r\n        contactFlow = cf.ContactFlowQuestionDate({\r\n          name: contactFlowName,\r\n          getState: getState,\r\n          uuidMap: uuidMap,\r\n          xxxMap: xxxMap,\r\n          question: question,\r\n          index: i,\r\n          addKey: addKey,\r\n          dispatch: dispatch,\r\n          language: language,\r\n          errorText: defaultText.errorText[language],\r\n          repeatText: defaultText.repeatText[language]\r\n        })\r\n      }\r\n      \r\n      qCount++\r\n      dispatch(setAmazonConnectData({[contactFlowName]: contactFlow}))\r\n    })\r\n    dispatch(setQuestionCount(qCount))\r\n\r\n    const staticStartName = \"automated_charite_data_start\"//`${basename}_start`//`question_start_${language}`\r\n    const staticStart = cf.ContactFlowStaticStart({\r\n      name: staticStartName,\r\n      text: defaultText.greetingText[language],\r\n      language: language,\r\n      firstQuestionName: `${basename}_0`\r\n    })\r\n    dispatch(setAmazonConnectData({[staticStartName]: staticStart}))    \r\n\r\n    state = getState()\r\n\r\n    const staticEndName = \"automated_charite_data_end\"//`${basename}_end`//`question_end_${language}`\r\n    const staticEnd = cf.ContactFlowStaticEnd({name: staticEndName, getState: getState})\r\n    dispatch(setAmazonConnectData({[staticEndName]: staticEnd}))\r\n  }\r\n}","import { connect } from \"react-redux\"\r\nimport AmazonConnectConfiguratorComponent from \"./AmazonConnectConfiguratorComponent\"\r\n\r\nimport { \r\n  createJSON,\r\n  downloadJSON,\r\n  createContactFlow\r\n} from \"./duck/operations\"\r\n\r\nexport const mapStateToProps = (state, ownProps) => ({\r\n  chariteData: state.creator.chariteData,\r\n  connectConf: state.creator.connectConf,\r\n  lambdaKeys: state.creator.lambdaKeys,\r\n  language: state.creator.language\r\n})\r\n\r\nexport const mapDispatchToProps = {\r\n  createJSON,\r\n  createContactFlow,\r\n  downloadJSON\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AmazonConnectConfiguratorComponent)","import React from \"react\"\r\nimport Container from \"react-bootstrap/Container\"\r\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\"\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Form from \"react-bootstrap/Form\"\r\nimport Accordion from \"react-bootstrap/Accordion\"\r\nimport Card from \"react-bootstrap/Card\"\r\n\r\nimport  AmazonSettings from \"./AmazonConnectConfiguratorContainer\" \r\n\r\n\r\nexport const defaultProps = {\r\n  availableLanguages: [\r\n    {key: 'en', display: 'English'},\r\n    {key: 'de', display: 'Deutsch'}\r\n  ]\r\n}\r\n\r\nexport const CreatorComponent = props => {\r\n\r\n  const {\r\n    order,\r\n    stringMap,\r\n    getQuestionsAndGenerateJSONMock,\r\n    availableLanguages,\r\n    handleLanguageChange,\r\n    language,\r\n    chariteData,\r\n    connectConf,\r\n  } = props\r\n\r\n  const bla = {\r\n    stringMap: stringMap[language],\r\n    order: order,\r\n    chariteData: chariteData,\r\n    connectConf: connectConf\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Hello World</h1>\r\n      <ButtonToolbar>\r\n        <ButtonGroup className=\"mr-2\" size=\"sm\">\r\n        {\r\n          // TODO: use something else instead of buttons\r\n          availableLanguages.map(lang =>\r\n          <Button size=\"xs\" variant={language === lang.key ? \"success\" : \"secondary\"} key={lang.key} onClick={() => handleLanguageChange(lang.key)}>{lang.display}</Button>\r\n            ) \r\n        }\r\n        </ButtonGroup>\r\n        <ButtonGroup className=\"mr-2\" size=\"sm\">\r\n          <Button onClick={getQuestionsAndGenerateJSONMock}>Get Questions</Button>\r\n        </ButtonGroup>\r\n        {chariteData ? <AmazonSettings /> : null}\r\n\r\n      </ButtonToolbar>\r\n      <Accordion>\r\n        {\r\n          Object.keys(bla).map((key, i) => \r\n            <Card key={\"Card\" + i}>\r\n              <Accordion.Toggle as={Card.Header} eventKey={i}>\r\n                { \"Show \" + key + \" JSON\"}\r\n              </Accordion.Toggle>\r\n              <Accordion.Collapse eventKey={i}>\r\n                <Card.Body>\r\n                <Form.Group controlId={\"controlTextarea\" + i}>\r\n                  <Form.Label>{key}</Form.Label>\r\n                  <Form.Control as=\"textarea\" rows=\"50\" value={bla[key] && JSON.stringify(bla[key], null, 4)} disabled/>\r\n                </Form.Group>\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Card>\r\n          )\r\n        }\r\n      </Accordion>\r\n    </Container>\r\n  )\r\n}\r\n\r\nCreatorComponent.defaultProps = defaultProps\r\n\r\nexport default CreatorComponent","import { connect } from \"react-redux\"\r\nimport CreatorComponent from \"./CreatorComponent\"\r\nimport { \r\n  getQuestionsAndGenerateJSONMock,\r\n  handleLanguageChange\r\n} from \"./duck/operations\"\r\n\r\nexport const mapStateToProps = (state, ownProps) => ({\r\n  order: state.creator.order,\r\n  stringMap: state.creator.stringMap,\r\n  language: state.creator.language,\r\n  chariteData: state.creator.chariteData,\r\n  connectConf: state.creator.connectConf,\r\n  lambdaKeys: state.creator.lambdaKeys\r\n})\r\n\r\nexport const mapDispatchToProps = {\r\n  getQuestionsAndGenerateJSONMock,\r\n  handleLanguageChange\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatorComponent)","import React from \"react\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport FormControl from \"react-bootstrap/FormControl\"\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\nexport const RadioOptionsComponent = props => {\r\n  return (\r\n    <InputGroup>\r\n      <FormControl\r\n        placeholder=\"Enter answer text\"\r\n      />\r\n      <InputGroup.Append>\r\n        <Button variant=\"outline-secondary\" onClick={() => alert(\"TBD\")}>up</Button>\r\n        <Button variant=\"outline-secondary\" onClick={() => alert(\"TBD\")}>down</Button>\r\n        <Button varion=\"danger\" onClick={() => alert(\"TBD\")}>add</Button>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n  )\r\n}\r\n\r\nexport default RadioOptionsComponent","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport FormControl from \"react-bootstrap/FormControl\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport RadioOptionComponent from \"./RadioOptionComponent\"\r\n\r\nexport const defaultProps = {\r\n\r\n}\r\n\r\n\r\nexport const propTypes = {\r\n  text: PropTypes.string\r\n}\r\n\r\n\r\nexport const QuestionComponent = props => {\r\n\r\n  const { uuid, question, handleRemoveQuestion,\r\n    handleMoveQuestion, index, total\r\n  } = props\r\n\r\n  return (\r\n    <InputGroup>\r\n      <FormControl\r\n        as=\"textarea\"\r\n        placeholder=\"Enter question text\"\r\n        defaultValue={question.text}\r\n      />\r\n    <InputGroup.Append>\r\n      <Button variant=\"outline-secondary\" disabled={index === 0} onClick={() => handleMoveQuestion(uuid, -1)}>up</Button>\r\n      <Button variant=\"outline-secondary\" disabled={total === index} onClick={() => handleMoveQuestion(uuid, 1)}>down</Button>\r\n      <Button varion=\"danger\" onClick={() => handleRemoveQuestion(uuid)}>remove</Button>\r\n    </InputGroup.Append>\r\n    { question.type === \"radio\" ? <RadioOptionComponent options={question.options} />: null}\r\n    </InputGroup>\r\n  )\r\n}\r\n\r\nQuestionComponent.propTypes = propTypes\r\nQuestionComponent.defaultProps = defaultProps\r\n\r\nexport default QuestionComponent","import React from \"react\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport FormControl from \"react-bootstrap/FormControl\"\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\n\r\nexport const AddRadioOptionComponent = props => {\r\n  const { handleAddRadioOption } = props\r\n  return (\r\n    <InputGroup>\r\n      <FormControl\r\n        placeholder=\"Enter answer text\"\r\n      />\r\n      <InputGroup.Append>\r\n        <Button varion=\"danger\" onClick={() => handleAddRadioOption()}>add</Button>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n  )\r\n}\r\n\r\nexport default AddRadioOptionComponent","//import fetch from \"cross-fetch\"\r\nimport { uuid as uuidV4 } from \"uuidv4\"\r\nimport {\r\n  resetNewQuestion,\r\n  addQuestion,\r\n  removeQuestion,\r\n  updateQuestion,\r\n  setQuestionText,\r\n  setQuestionType,\r\n  moveQuestion,\r\n  addRadioOption\r\n} from \"./actions\"\r\n\r\n\r\nexport const handleAddQuestion = question => {\r\n  return dispatch => {\r\n    question.uuid = uuidV4()\r\n    dispatch(addQuestion(question))\r\n    dispatch(resetNewQuestion({text: \"\", type: null}))\r\n  }\r\n}\r\n\r\nexport const handleRemoveQuestion = question => {\r\n  return dispatch => {\r\n    dispatch(removeQuestion(question))\r\n  }\r\n}\r\n\r\nexport const handleUpateQuestion = question => {\r\n  return dispatch => {\r\n    dispatch(updateQuestion)\r\n  }\r\n}\r\n\r\nexport const handleQuestionTextChange = text => {\r\n  return dispatch => {\r\n    dispatch(setQuestionText(text))\r\n  }\r\n}\r\n\r\nexport const handleQuestionTypeChange = type => {\r\n  return dispatch => {\r\n    dispatch(setQuestionType(type))\r\n  }\r\n}\r\n\r\nexport const handleMoveQuestion = (uuid, direction) => {\r\n  return dispatch => {\r\n    dispatch(moveQuestion(uuid, direction))\r\n  }\r\n}\r\n\r\nexport const handleAddRadioOption = option => {\r\n  return dispatch => {\r\n    dispatch(addRadioOption(option))\r\n  }\r\n}","import { connect } from \"react-redux\"\r\nimport AddRadioOptionComponent from \"./AddRadioOptionComponent\"\r\nimport {\r\n  handleAddRadioOption\r\n\r\n} from \"./duck/operations\"\r\n\r\n\r\nexport const mapStateToProps = (state, ownProps) => ({\r\n})\r\n\r\nexport const mapDispatchToProps = {\r\n  handleAddRadioOption\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddRadioOptionComponent)","import React from \"react\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport FormControl from \"react-bootstrap/FormControl\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Form from \"react-bootstrap/Form\"\r\nimport AddRadioOption from \"./AddRadioOptionContainer\"\r\n\r\nexport const defaultProps = {\r\n  questionTypes: ['radio', 'date'],\r\n}\r\n\r\nexport const AddQuestionComponent = props => {\r\n  const {\r\n    handleAddQuestion,\r\n    questionTypes,\r\n    question,\r\n    handleQuestionTextChange,\r\n    handleQuestionTypeChange\r\n  } = props\r\n\r\n  return (\r\n    <div>\r\n      <InputGroup>\r\n        <FormControl as=\"textarea\"\r\n          placeholder=\"Enter question text\"\r\n          value={question.text}\r\n          onChange={(event) => handleQuestionTextChange(event.target.value)}\r\n          \r\n        />\r\n        <InputGroup.Append>\r\n          <Button variant=\"success\" disabled={question.text.length === 0 || question.type === null}\r\n          onClick={() => handleAddQuestion(question)}>Add Question</Button>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n      <Form>\r\n        {questionTypes.map((qtype, i) =>\r\n          <Form.Check inline label={`question type is ${qtype}`} type=\"radio\"\r\n            checked={question.type === qtype} onChange={() => handleQuestionTypeChange(qtype)}\r\n            id={`questiontype-${qtype}`} key={`questiontype-${qtype}`}/>\r\n        )}\r\n      </Form>\r\n      {\r\n        question.type === \"radio\" ? <AddRadioOption /> : null\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nAddQuestionComponent.defaultProps = defaultProps\r\n\r\nexport default AddQuestionComponent","import { connect } from \"react-redux\"\r\nimport AddQuestionComponent from \"./AddQuestionComponent\"\r\nimport {\r\n  handleAddQuestion,\r\n  handleUpateQuestion,\r\n  handleQuestionTextChange,\r\n  handleQuestionTypeChange\r\n} from \"./duck/operations\"\r\n\r\n\r\nexport const mapStateToProps = (state, ownProps) => ({\r\n  question: state.questioncatalog.newQuestion\r\n})\r\n\r\nexport const mapDispatchToProps = {\r\n  handleAddQuestion,\r\n  handleUpateQuestion,\r\n  handleQuestionTextChange,\r\n  handleQuestionTypeChange\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddQuestionComponent)","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Container from \"react-bootstrap/Container\"\r\nimport Question from \"./QuestionComponent\"\r\nimport AddQuestion from \"./AddQuestionContainer\"\r\n\r\nexport const defaultProps = {}\r\n\r\nexport const propTypes = {\r\n  questions: PropTypes.array\r\n}\r\n\r\nexport const QuestionCatalogComponent = props => {\r\n\r\n  const {\r\n    questions,\r\n    handleRemoveQuestion,\r\n    handleMoveQuestion\r\n  } = props\r\n\r\n  console.log({questions})\r\n\r\n  return (\r\n    <Container>\r\n      <h1>QuestionCatalogComponent</h1>\r\n      {questions.map((question,i) => \r\n        <Question key={question.uuid} uuid={question.uuid} question={question}\r\n          handleRemoveQuestion={handleRemoveQuestion}\r\n          handleMoveQuestion={handleMoveQuestion}\r\n          index={i} total={questions.length - 1}\r\n        />\r\n      )}\r\n      <AddQuestion />\r\n    </Container>\r\n  )\r\n}\r\n\r\nQuestionCatalogComponent.propTypes = propTypes\r\nQuestionCatalogComponent.defaultProps = defaultProps\r\n\r\nexport default QuestionCatalogComponent","import { connect } from \"react-redux\"\r\nimport QuestionCatalogComponent from \"./QuestionCatalogComponent\"\r\nimport {\r\n  handleRemoveQuestion,\r\n  handleUpateQuestion,\r\n  handleMoveQuestion\r\n} from \"./duck/operations\"\r\n\r\n\r\nexport const mapStateToProps = (state, ownProps) => ({\r\n  questions: state.questioncatalog.questions\r\n})\r\n\r\nexport const mapDispatchToProps = {\r\n  handleRemoveQuestion,\r\n  handleUpateQuestion,\r\n  handleMoveQuestion\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionCatalogComponent)","import React from \"react\";\r\nimport { HashRouter, Route, Link } from \"react-router-dom\"\r\nimport { Creator } from \"./creator\"\r\nimport { QuestionCatalog } from \"./questioncatalog\"\r\n\r\nexport default function App() {\r\n  return (\r\n    <HashRouter basename='/'>\r\n      <div>\r\n        <ul>\r\n          <li><Link to=\"/\">Create Amazon Connect</Link></li>\r\n          <li><Link to=\"/questions\">Create Questions</Link></li>\r\n        </ul>\r\n        <hr />\r\n        <Route exact path=\"/\" component={Creator} />\r\n        <Route path=\"/questions\" component={QuestionCatalog} />\r\n      </div>\r\n    </HashRouter>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './store'\r\n\r\nimport App from './app/App'\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}