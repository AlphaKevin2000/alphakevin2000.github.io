{"version":3,"sources":["app/creator/duck/actions.js","app/creator/duck/reducers.js","app/creator/duck/index.js","app/questioncatalog/duck/actions.js","app/questioncatalog/duck/reducers.js","app/questioncatalog/duck/index.js","reducers.js","store.js","app/creator/AmazonConnectConfiguratorComponent.jsx","app/creator/duck/amazon-connect/emptycontactflow.js","app/creator/duck/amazon-connect/contactflowerror.js","app/creator/duck/amazon-connect/contactflowend.js","app/creator/duck/amazon-connect/contactflowtransfer.js","app/creator/duck/amazon-connect/contactflowlogging.js","app/creator/duck/amazon-connect/contactflowvoice.js","app/creator/duck/amazon-connect/contactflowplayprompt.js","app/creator/duck/amazon-connect/contactflowrepeat.js","app/creator/duck/amazon-connect/contactflowattribute.js","app/creator/duck/amazon-connect/contactflowinvokeexternal.js","app/creator/duck/amazon-connect/contactflowuserinput.js","app/creator/duck/amazon-connect/contactflowstaticstart.js","app/creator/duck/amazon-connect/contactflowstaticend.js","app/creator/duck/amazon-connect/contactflowquestion.js","app/creator/duck/amazon-connect/contactflowstore.js","app/creator/duck/amazon-connect/contactflowquestiondate.js","app/creator/duck/amazon-connect/contactflow.js","app/creator/duck/foo.js","app/creator/duck/bar.js","app/creator/duck/operations.js","app/creator/AmazonConnectConfiguratorContainer.js","app/creator/CreatorComponent.jsx","app/creator/CreatorContainer.js","app/questioncatalog/RadioOptionComponent.jsx","app/questioncatalog/QuestionComponent.jsx","app/questioncatalog/AddRadioOptionComponent.jsx","app/questioncatalog/duck/operations.js","app/questioncatalog/AddRadioOptionContainer.js","app/questioncatalog/AddQuestionComponent.jsx","app/questioncatalog/AddQuestionContainer.js","app/questioncatalog/QuestionCatalogComponent.jsx","app/questioncatalog/QuestionCatalogContainer.js","app/App.js","index.js"],"names":["setQuestionnaireStrings","stringMap","type","payload","setQuestionnaireOrder","order","setAmazonConnectData","data","addKey","key","setQuestionCount","questionCount","initialState","undefined","language","chariteData","connectConf","uuidList","lambdaKeys","creatorReducer","state","action","Object","assign","push","uuid","indexOf","quesitonCount","updateQuestion","question","questions","newQuestion","text","options","questionCatalogReducer","index","filter","q","findIndex","arr","newIndex","direction","splice","map","JSON","parse","stringify","option","combineReducers","creator","questioncatalog","questioncatalogReducer","loggerMiddleware","createLogger","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","AmazonConnectConfiguratorComponent","props","createContactFlow","downloadJSON","ButtonGroup","size","Button","onClick","disabled","defaultProps","version","positionX","positionY","description","snapToGrid","propTypes","startUUID","PropTypes","string","isRequired","name","number","bool","EmptyContactFlow","modules","start","metadata","entryPointPosition","x","y","status","errorText","useDynamic","ContactFlowError","ownUUID","transitionUUID","id","branches","condition","transition","parameters","value","namespace","position","ContactFlowEnd","endPoint","errorUUID","resourceName","ContactFlowTransfer","ContactFlow","target","ContactFlowLogging","voiceType","ContactFlowVoice","ContactFlowPlayPrompt","ContactFlowRepeat","any","ContactFlowAttribute","arrayOf","ContactFlowInvokeExternal","dynamicParameters","forEach","i","dynamicParamter","dynamicMetadata","maxDigits","object","repeatUUID","transitionUUIDs","optionsUUIDMap","dispatch","func","ContactFlowUserInput","dynamicBranches","conditionMetadata","staticBranches","hasOwnProperty","conditionMetadataObj","toString","category","contactFlowAttribute","conditionType","conditionValue","blyatUUID","concat","generateTextFromOptions","ContactFlowStaticStart","loggingUUUID","startErrorUUID","startEndUUID","startTransferUUID","voiceUUID","greetingUUID","staticStart","startModules","startError","startEnd","startTransfer","startLogging","startVoice","startGreeting","getState","ContactFlowStaticEnd","finishUUID","endErrorUUID","lambdaUUID","recomUUID","recomSpeechUUID","staticEnd","endModules","endError","finishLine","lambdaCall","recomAttr","recomVoice","ContactFlowStore","useFullText","console","log","wtf","useDynamicForEncryptionKeys","useDynamicForTerminatorDigits","countryCodePrefix","ContactFlowQuestion","transferUUIDs","uuidMap","xxxMap","endUUID","nextQuestionMap","someUUIDs","Array","from","Set","find","u","singleTransferUUID","contactFlowQuestion","contactFlowEnd","contactFlowRepeat","contactFlowError","t","fooName","current","nextIndex","slice","length","contactFlowTransfer","contactFlowUserInput","inputType","ContactFlowQuestionDate","contactFlowStore","CATEGORIES","QUESTION","QUESTIONNAIRE_ORDER","comment","scoreMap","QUESTIONNAIRE","de","en","createJSON","strings","keys","setCreatedJSON","createDateQuestion","createRadioQuestion","mapDispatchToProps","questionIDList","questionIDSet","qCount","contactFlow","contactFlowName","cf","jsonMap","zip","JSZip","file","generateAsync","then","content","fileDownload","connect","ownProps","CreatorComponent","getQuestionsAndGenerateJSONMock","availableLanguages","handleLanguageChange","bla","Container","ButtonToolbar","className","lang","variant","display","Accordion","Card","Toggle","as","Header","eventKey","Collapse","Body","Form","Group","controlId","Label","Control","rows","url","setLanguage","RadioOptionsComponent","InputGroup","FormControl","placeholder","Append","alert","varion","QuestionComponent","handleRemoveQuestion","handleMoveQuestion","total","defaultValue","RadioOptionComponent","AddRadioOptionComponent","handleAddRadioOption","handleUpateQuestion","addRadioOption","AddQuestionComponent","handleAddQuestion","questionTypes","handleQuestionTextChange","handleQuestionTypeChange","onChange","event","qtype","Check","inline","label","checked","uuidV4","addQuestion","resetNewQuestion","setQuestionText","setQuestionType","QuestionCatalogComponent","array","moveQuestion","App","basename","to","exact","path","component","Creator","QuestionCatalog","preloadedState","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32fa7a3f.chunk.js","sourcesContent":["export const SET_QUESTIONNAIRE_STRING_MAP = \"SET_QUESTIONNAIRE_STRING_MAP\"\r\nexport const SET_QUESTIONNAIRE_ORDER = \"SET_QUESTIONNAIRE_ORDER\"\r\nexport const SET_LANGUAGE = \"SET_LANGUAGE\"\r\nexport const SET_CREATED_JSON = \"SET_CREATED_JSON\"\r\nexport const SET_CREATED_AMAZON_CONNECT_CONFIG = \"SET_CREATED_AMAZON_CONNECT_CONFIG\"\r\nexport const SET_CREATED_AMAZON_CONNECT_DATA = \"SET_CREATED_AMAZON_CONNECT_DATA\"\r\nexport const ADD_CONTACT_FLOW = \"ADD_CONTACT_FLOW\"\r\nexport const ADD_UUID = \"ADD_UUID\"\r\nexport const ADD_KEY = \"ADD_KEY\"\r\nexport const SET_QUESTION_COUNT = \"SET_QUESTION_COUNT\"\r\n\r\nexport const setQuestionnaireStrings = stringMap => ({\r\n  type: SET_QUESTIONNAIRE_STRING_MAP,\r\n  payload: { stringMap }\r\n})\r\n\r\nexport const setQuestionnaireOrder = order => ({\r\n  type: SET_QUESTIONNAIRE_ORDER,\r\n  payload: { order }\r\n})\r\n\r\nexport const setLanguage = language => ({\r\n  type: SET_LANGUAGE,\r\n  payload: { language }\r\n})\r\n\r\nexport const setCreatedJSON = data => ({\r\n  type: SET_CREATED_JSON,\r\n  payload: { data }\r\n})\r\n\r\nexport const setCreatedAmazonConnectConfig = data => ({\r\n  type: SET_CREATED_AMAZON_CONNECT_CONFIG,\r\n  payload: { data }\r\n})\r\n\r\nexport const setAmazonConnectData = data => ({\r\n  type: SET_CREATED_AMAZON_CONNECT_DATA,\r\n  payload: { data }\r\n})\r\n\r\nexport const addContactFlow = contactFlow => ({\r\n  type: ADD_CONTACT_FLOW,\r\n  payload: { contactFlow }\r\n})\r\n\r\nexport const addUUID = uuid => ({\r\n  type: ADD_UUID,\r\n  payload: { uuid }\r\n})\r\n\r\nexport const addKey = key => ({\r\n  type: ADD_KEY,\r\n  payload: { key }\r\n})\r\n\r\nexport const setQuestionCount = questionCount => ({\r\n  type: SET_QUESTION_COUNT,\r\n  payload: { questionCount }\r\n})","import {\r\n  SET_QUESTIONNAIRE_ORDER,\r\n  SET_QUESTIONNAIRE_STRING_MAP,\r\n  SET_LANGUAGE,\r\n  SET_CREATED_JSON,\r\n  SET_CREATED_AMAZON_CONNECT_CONFIG,\r\n  SET_CREATED_AMAZON_CONNECT_DATA,\r\n  ADD_UUID,\r\n  ADD_KEY,\r\n  SET_QUESTION_COUNT\r\n} from \"./actions\"\r\n\r\nexport const initialState = {\r\n  order: undefined,\r\n  stringMap: {'de': undefined, 'en': undefined},\r\n  language: 'en',\r\n  chariteData: undefined,\r\n  connectConf: undefined,\r\n  uuidList: [],\r\n  lambdaKeys: {\"lambdaKeys\": []}\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_QUESTIONNAIRE_ORDER:\r\n      return {\r\n        ...state,\r\n        order: action.payload.order\r\n      }\r\n    case SET_QUESTIONNAIRE_STRING_MAP:\r\n      return {\r\n        ...state,\r\n        stringMap: action.payload.stringMap\r\n      }\r\n    case SET_LANGUAGE:\r\n      return {\r\n        ...state,\r\n        language: action.payload.language\r\n      }\r\n    case SET_CREATED_JSON:\r\n      return {\r\n        ...state,\r\n        chariteData: action.payload.data\r\n      }\r\n    case SET_CREATED_AMAZON_CONNECT_CONFIG:\r\n      return {\r\n        ...state,\r\n        connectConf: action.payload.data\r\n      }\r\n    case SET_CREATED_AMAZON_CONNECT_DATA:\r\n      const connectConf = Object.assign({}, state.connectConf, action.payload.data)\r\n      return {\r\n        ...state,\r\n        connectConf\r\n      }\r\n    case ADD_UUID:\r\n      const uuidList = [...state.uuidList]\r\n      uuidList.push(action.payload.uuid)\r\n      return {\r\n        ...state,\r\n        uuidList\r\n      }\r\n    case ADD_KEY:\r\n      let lambdaKeys = state.lambdaKeys\r\n  \r\n      if (lambdaKeys[\"lambdaKeys\"].indexOf(action.payload.key) === -1) {\r\n        lambdaKeys[\"lambdaKeys\"].push(action.payload.key)\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        lambdaKeys\r\n      }\r\n    case SET_QUESTION_COUNT:\r\n      return {\r\n        ...state,\r\n        quesitonCount: action.payload.questionCount\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import creatorReducer from './reducers';\r\n\r\nexport default creatorReducer;","export const RESET_NEW_QUESTION = \"RESET_NEW_QUESTION\"\r\nexport const ADD_QUESTION = \"ADD_QUESTION\"\r\nexport const REMOVE_QUESTION = \"REMOVE_QUESTION\"\r\nexport const UPDATE_QUESTION = \"UPDATE_QUESTION\"\r\nexport const SET_QUESTION_TEXT = \"SET_QUESTION_TEXT\"\r\nexport const SET_QUESTION_TYPE = \"SET_QUESTION_TYPE\"\r\nexport const MOVE_QUESTION = \"MOVE_QUESTION\"\r\nexport const ADD_RADIO_OPTION = \"ADD_RADIO_OPTION\"\r\n\r\nexport const resetNewQuestion = question => ({\r\n  type: RESET_NEW_QUESTION,\r\n  payload: { question }\r\n})\r\n\r\nexport const addQuestion = question => ({\r\n  type: ADD_QUESTION,\r\n  payload: { question }\r\n})\r\n\r\nexport const removeQuestion = uuid => ({\r\n  type: REMOVE_QUESTION,\r\n  payload: { uuid }\r\n})\r\n\r\nexport const updateQuestion = question => ({\r\n  type: UPDATE_QUESTION,\r\n  payload: { question }\r\n})\r\n\r\nexport const setQuestionText = text => ({\r\n  type: SET_QUESTION_TEXT,\r\n  payload: { text }\r\n})\r\n\r\nexport const setQuestionType = type => ({\r\n  type: SET_QUESTION_TYPE,\r\n  payload: { type }\r\n})\r\n\r\nexport const moveQuestion = (uuid, direction) => ({\r\n  type: MOVE_QUESTION,\r\n  payload: { uuid, direction }\r\n})\r\n\r\nexport const addRadioOption = option => ({\r\n  type: ADD_RADIO_OPTION,\r\n  payload: { option }\r\n})","import {\r\n  RESET_NEW_QUESTION,\r\n  ADD_QUESTION,\r\n  REMOVE_QUESTION,\r\n  UPDATE_QUESTION,\r\n  SET_QUESTION_TEXT,\r\n  SET_QUESTION_TYPE,\r\n  MOVE_QUESTION,\r\n  ADD_RADIO_OPTION\r\n} from \"./actions\"\r\n\r\n\r\nexport const initialState = {\r\n  questions: [],\r\n  newQuestion: {\r\n    text: \"\",\r\n    type: null,\r\n    options: []\r\n  }\r\n}\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n  let questions, newQuestion, index\r\n  switch (action.type) {\r\n    case RESET_NEW_QUESTION:\r\n      return {\r\n        ...state,\r\n        newQuestion: {\r\n          text: \"\",\r\n          type: \"date\"\r\n        }\r\n      }\r\n    case ADD_QUESTION:\r\n      questions = [...state.questions]\r\n      questions.push(action.payload.question)\r\n      return {\r\n        ...state,\r\n        questions\r\n      }\r\n    case REMOVE_QUESTION:\r\n      questions = [...state.questions].filter(q => q.uuid !== action.payload.uuid)\r\n      return {\r\n        ...state,\r\n        questions\r\n      }\r\n    case SET_QUESTION_TEXT:\r\n      newQuestion = Object.assign({}, state.newQuestion)\r\n      newQuestion.text = action.payload.text\r\n      return {\r\n        ...state,\r\n        newQuestion\r\n      }\r\n    case SET_QUESTION_TYPE:\r\n      newQuestion = Object.assign({}, state.newQuestion)\r\n      newQuestion.type = action.payload.type\r\n      return {\r\n        ...state,\r\n        newQuestion\r\n      }\r\n    case UPDATE_QUESTION:\r\n      questions = [...state.questions]\r\n      index = questions.findIndex(question => question.uuid === action.payload.question.uuid)\r\n      questions[index] = action.payload.question\r\n      return {\r\n        ...state,\r\n        questions\r\n      }\r\n    case MOVE_QUESTION:\r\n      // NOT WORKIN YET\r\n      let arr = [...state.questions]\r\n      index = arr.findIndex(question => question.uuid === action.payload.uuid)\r\n      let newIndex = index + action.payload.direction\r\n      arr.splice(newIndex, 0, arr.splice(index, 1)[0])\r\n      questions = arr.map(question => Object.assign({}, JSON.parse(JSON.stringify(question))))\r\n      return {\r\n        ...state,\r\n        questions\r\n      }\r\n    case ADD_RADIO_OPTION:\r\n      newQuestion = Object.assign({}, state.newQuestion)\r\n      newQuestion.options.push(action.payload.option)\r\n      return {\r\n        ...state,\r\n        newQuestion\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import questionCatalogReducer from './reducers';\r\n\r\nexport default questionCatalogReducer;","import { combineReducers } from \"redux\"\r\nimport creatorReducer from \"./app/creator/duck\"\r\nimport questioncatalogReducer  from \"./app/questioncatalog/duck\"\r\n\r\nexport default combineReducers({\r\n    creator: creatorReducer,\r\n    questioncatalog: questioncatalogReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst loggerMiddleware = createLogger();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function configureStore(preloadedState) {\r\n    return createStore(\r\n      rootReducer,\r\n      preloadedState,\r\n      composeEnhancers(applyMiddleware(thunkMiddleware, loggerMiddleware)),\r\n    )\r\n}","import React from \"react\"\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\"\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\nexport const defaultProps = {}\r\n\r\nexport const AmazonConnectConfiguratorComponent = props => {\r\n\r\n  const {\r\n    createContactFlow,\r\n    connectConf,\r\n    downloadJSON,\r\n    lambdaKeys,\r\n    language\r\n  } = props\r\n\r\n  return (\r\n\r\n   <ButtonGroup size=\"sm\">\r\n          <Button onClick={createContactFlow}>create Connect Config</Button>\r\n          <Button disabled={!connectConf} onClick={() => downloadJSON(connectConf, language)}>download Configs</Button>\r\n          <Button disabled={!connectConf} onClick={() => downloadJSON(lambdaKeys, language)}>download keys</Button>\r\n    </ButtonGroup>\r\n  )\r\n}\r\n\r\nAmazonConnectConfiguratorComponent.defaultProps = defaultProps\r\n\r\nexport default AmazonConnectConfiguratorComponent","import PropTypes from \"prop-types\"\r\n\r\nexport const defaultProps = {\r\n  version: \"1\",\r\n  positionX: 20,\r\n  positionY: 50,\r\n  description: \"generated ContactFlow\",\r\n  snapToGrid: true,\r\n}\r\n\r\nexport const propTypes = {\r\n  startUUID: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  version: PropTypes.string,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number,\r\n  description: PropTypes.string,\r\n  snapToGrid: PropTypes.bool\r\n}\r\n\r\n\r\nexport const EmptyContactFlow = ({\r\n  startUUID, name,\r\n  version = defaultProps.version,\r\n  positionX = defaultProps.positionX,\r\n  positionY = defaultProps.positionY,\r\n  description = defaultProps.description,\r\n  snapToGrid = defaultProps.snapToGrid\r\n  }) => {\r\n\r\n  return {\r\n    modules: [],\r\n    version: version,\r\n    type: \"contactFlow\",\r\n    start: startUUID,\r\n    metadata: {\r\n      entryPointPosition: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      snapToGrid: snapToGrid,\r\n      name: name,\r\n      description: description,\r\n      type: \"contactFlow\",\r\n      status: \"saved\"\r\n    }\r\n  }\r\n}\r\n\r\nEmptyContactFlow.propTypes = propTypes\r\nEmptyContactFlow.defaultProps = defaultProps\r\n\r\nexport default EmptyContactFlow\r\n\r\n","import PropTypes from \"prop-types\"\r\n\r\nexport const defaultProps = {\r\n  positionX: 220,\r\n  positionY: 420,\r\n  errorText: \"<speak>Irgendetwas ist schief gelaufen. Es tut uns Leid. Bitte versuchen Sie es später noch einmal.</speak>\",\r\n  useDynamic: false\r\n}\r\n\r\nexport const propTypes = {\r\n  startUUID: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number,\r\n  useDynamic: PropTypes.bool\r\n}\r\n\r\nexport const ContactFlowError = ({\r\n    ownUUID, transitionUUID,\r\n    errorText = defaultProps.errorText,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY,\r\n    useDynamic = defaultProps.useDynamic\r\n  }) => {\r\n\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"PlayPrompt\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"Text\",\r\n        value: errorText,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TextToSpeechType\",\r\n        value: \"ssml\"\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      useDynamic: useDynamic\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowError.propTypes = propTypes\r\nContactFlowError.defaultProps = defaultProps\r\n\r\nexport default ContactFlowError","import PropTypes from \"prop-types\"\r\n\r\nexport const defaultProps = {\r\n  positionX: 20,\r\n  positionY: 220\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number\r\n}\r\n\r\nexport const ContactFlowEnd = ({\r\n    ownUUID,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY\r\n  }) => {\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"Disconnect\",\r\n    branches: [],\r\n    parameters: [],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowEnd.propTypes = propTypes\r\nContactFlowEnd.defaultProps = defaultProps\r\n\r\nexport default ContactFlowEnd","import PropTypes from \"prop-types\"\r\n\r\n\r\n// TODO: find better name for endPoint, maybe even split it in parts\r\nexport const defaultProps = {\r\n  positionX: 20,\r\n  positionY: 600,\r\n  endPoint: \"\"\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  resourceName: PropTypes.string.isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number,\r\n  endPoint: PropTypes.string,\r\n  useDynamic: PropTypes.bool\r\n}\r\n\r\nexport const ContactFlowTransfer = ({\r\n    ownUUID, errorUUID, resourceName,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY,\r\n    endPoint = defaultProps.endPoint,\r\n    useDynamic = defaultProps.useDynamic\r\n  }) => {\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"Transfer\",\r\n    branches: [\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"ContactFlowId\",\r\n        value: endPoint,\r\n        resourceName: resourceName\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      useDynamic: useDynamic,\r\n      ContactFlow: {\r\n        id: endPoint,\r\n        text: resourceName\r\n      }\r\n    },\r\n    target: \"Flow\"\r\n  }\r\n}\r\n\r\nContactFlowTransfer.propTypes = propTypes\r\nContactFlowTransfer.defaultProps = defaultProps\r\n\r\nexport default ContactFlowTransfer","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  positionX: 220,\r\n  positionY: 20\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n}\r\n\r\nexport const ContactFlowLogging = ({\r\n    ownUUID, transitionUUID, errorUUID,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY\r\n  }) => {\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"SetLoggingBehavior\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"LoggingBehavior\",\r\n        value: \"Enable\"\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowLogging.propTypes = propTypes\r\nContactFlowLogging.defaultProps = defaultProps\r\n\r\nexport default ContactFlowLogging","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  voiceType: \"Vicki\",\r\n  positionX: 420,\r\n  positionY: 20\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  voiceType: PropTypes.string,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number\r\n}\r\n\r\nexport const ContactFlowVoice = ({\r\n    ownUUID, transitionUUID, errorUUID,\r\n    voiceType = defaultProps.voiceType,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY\r\n  }) => {\r\n\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"SetVoice\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"GlobalVoice\",\r\n        value: voiceType\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowVoice.propTypes = propTypes\r\nContactFlowVoice.defaultProps = defaultProps\r\n\r\nexport default ContactFlowVoice","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  positionX: 620,\r\n  positionY: 20,\r\n  useDynamic: false\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  positionX: PropTypes.string,\r\n  positionY: PropTypes.string,\r\n  useDynamic: PropTypes.bool\r\n}\r\n\r\nexport const ContactFlowPlayPrompt = ({\r\n    ownUUID, transitionUUID, errorUUID, text,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY,\r\n    useDynamic = defaultProps.useDynamic\r\n  }) => {\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"PlayPrompt\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"Text\",\r\n        value: text,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TextToSpeechType\",\r\n        value: \"ssml\"\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      useDynamic: useDynamic\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowPlayPrompt.propTypes = propTypes\r\nContactFlowPlayPrompt.defaultProps = defaultProps\r\n\r\nexport default ContactFlowPlayPrompt","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  text: \"<speak>Die Frage wird nun wiederholt.</speak>\",\r\n  useDynamic: false\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  positionX: PropTypes.number.isRequired,\r\n  positionY: PropTypes.number.isRequired,\r\n  text: PropTypes.string,\r\n  useDynamic: PropTypes.bool\r\n}\r\n\r\nexport const ContactFlowRepeat = ({\r\n    ownUUID, transitionUUID, positionX, positionY,\r\n    text = defaultProps.text,\r\n    useDynamic = defaultProps.useDynamic\r\n  }) => {\r\n  return {\r\n    id: ownUUID,\r\n    type: \"PlayPrompt\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"Text\",\r\n        value: text,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TextToSpeechType\",\r\n        value: \"ssml\"\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      useDynamic: useDynamic\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowRepeat.propTypes = propTypes\r\nContactFlowRepeat.defaultProps = defaultProps\r\n\r\nexport default ContactFlowRepeat","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  namespace: null\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n  key: PropTypes.string.isRequired,\r\n  positionX: PropTypes.number.isRequired,\r\n  positionY: PropTypes.number.isRequired\r\n}\r\n\r\n\r\nexport const ContactFlowAttribute = ({\r\n    ownUUID, errorUUID, transitionUUID, value, key, positionX, positionY,\r\n    namespace = defaultProps.namespace\r\n  }) => {\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"SetAttributes\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"Attribute\",\r\n        value: value,\r\n        key: key,\r\n        namespace: namespace\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nContactFlowAttribute.propTypes = propTypes\r\nContactFlowAttribute.defaultProps = defaultProps\r\n\r\nexport default ContactFlowAttribute","import PropTypes from \"prop-types\"\r\n\r\n\r\nexport const defaultProps = {\r\n  positionX: 337,\r\n  positionY: 35,\r\n  endPoint: \"arn:aws:lambda:eu-west-2:260148551992:function:determineWordsForCovApp\"\r\n}\r\n\r\nexport const propTypes = {\r\n  ownUUID: PropTypes.string.isRequired,\r\n  transitionUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  lambdaKeys: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number,\r\n  endPoint: PropTypes.string\r\n}\r\n\r\nexport const ContactFlowInvokeExternal = ({\r\n    ownUUID, transitionUUID, errorUUID, lambdaKeys,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY,\r\n    endPoint = defaultProps.endPoint\r\n  }) => {\r\n\r\n  let dynamicParameters = []\r\n  let dynamicMetadata = {}\r\n\r\n  lambdaKeys.forEach((key, i) => {\r\n    let dynamicParamter = {\r\n      name: \"Parameter\",\r\n      key: key,\r\n      value: `$.Attributes.${key}`,\r\n      namespace: null\r\n    }\r\n    let dynamicMetadata = {[key]: false}\r\n    dynamicParameters.push(dynamicParamter)\r\n    dynamicMetadata[key] = false\r\n  })\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"InvokeExternalResource\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: transitionUUID\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"FunctionArn\",\r\n        value: endPoint,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TimeLimit\",\r\n        value: \"8\"\r\n      },\r\n      ...dynamicParameters\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      dynamicMetadata: dynamicMetadata,\r\n      useDynamic: false\r\n    },\r\n    target: \"Lambda\"\r\n  }\r\n}\r\n\r\nContactFlowInvokeExternal.propTypes = propTypes\r\nContactFlowInvokeExternal.defaultProps = defaultProps\r\n\r\nexport default ContactFlowInvokeExternal","import PropTypes from \"prop-types\"\r\nimport { uuid } from \"uuidv4\"\r\nimport { ContactFlowAttribute } from \"./contactflowattribute\"\r\n\r\n\r\nexport const defaultProps = {\r\n  useDynamic: false,\r\n  maxDigits: \"1\"\r\n}\r\n\r\nexport const generateTextFromOptions = question => {\r\n  let text = `${question.text} <break time=\"1s\" />`\r\n\r\n  question.options.forEach((option, i) => {\r\n    text = text.concat(`Drücken Sie die ${i} für ${option} <break time=\"1s\" />`)\r\n  })\r\n  return `<speak>${text}</speak>`\r\n}\r\n\r\nexport const propTypes = {\r\n  question: PropTypes.object.isRequired,\r\n  ownUUID: PropTypes.string.isRequired,\r\n  repeatUUID: PropTypes.string.isRequired,\r\n  errorUUID: PropTypes.string.isRequired,\r\n  transitionUUIDs: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  optionsUUIDMap: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  modules: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  positionX: PropTypes.number.isRequired,\r\n  positionY: PropTypes.number.isRequired,\r\n  dispatch: PropTypes.func.isRequired,\r\n  addKey: PropTypes.func.isRequired,\r\n  useDynamic: PropTypes.bool,\r\n  maxDigits: PropTypes.string\r\n}\r\n\r\nexport const ContactFlowUserInput = ({\r\n  question,\r\n  ownUUID,\r\n  repeatUUID,\r\n  errorUUID,\r\n  transitionUUIDs,\r\n  optionsUUIDMap,\r\n  modules,\r\n  positionX,\r\n  positionY,\r\n  dispatch,\r\n  addKey,\r\n  useDynamic = defaultProps.useDynamic,\r\n  maxDigits = defaultProps.maxDigits\r\n}) => {\r\n\r\n  const conditionMetadata = []\r\n\r\n  let staticBranches = [\r\n    {\r\n      condition: \"Timeout\",\r\n      transition: repeatUUID\r\n    },\r\n    {\r\n      condition: \"NoMatch\",\r\n      transition: repeatUUID\r\n    },\r\n    {\r\n      condition: \"Error\",\r\n      transition: errorUUID\r\n    }\r\n  ]\r\n\r\n  /*  each dynamic branch needs a SetAttributes */\r\n  let dynamicBranches\r\n\r\n  if (question.hasOwnProperty(\"options\")) {\r\n    dynamicBranches = question.options.map((option, i) => {\r\n      let conditionMetadataUUID = uuid()\r\n\r\n      const conditionMetadataObj = {\r\n        id: conditionMetadataUUID,\r\n        value: i.toString()\r\n      }\r\n      conditionMetadata.push(conditionMetadataObj)\r\n\r\n      let key = `${question.category}_${question.id}`\r\n      dispatch(addKey(key))\r\n\r\n      let contactFlowAttribute = ContactFlowAttribute({\r\n        ownUUID: optionsUUIDMap[i],\r\n        errorUUID: errorUUID,\r\n        key: key,\r\n        value: i,\r\n        positionX: positionX + 250,\r\n        positionY: positionY + i * 200,\r\n        transitionUUID: transitionUUIDs[i].uuid\r\n      })\r\n      modules.push(contactFlowAttribute)\r\n\r\n      return {\r\n        condition: \"Evaluate\",\r\n        conditionType: \"Equals\",\r\n        conditionValue: i.toString(),\r\n        transition: optionsUUIDMap[i]\r\n      }\r\n    })\r\n  }\r\n  else {\r\n    // TODO: make this work properly\r\n    //let conditionMetadataUUID = optionsUUIDMap[0]\r\n\r\n    /* const conditionMetadataObj = {\r\n        id: conditionMetadataUUID,\r\n        value: \"1\"\r\n    } */\r\n\r\n    //conditionMetadata.push(conditionMetadataObj)\r\n\r\n    /*  dynamicBranches = [{\r\n       condition: \"Evaluate\",\r\n       conditionType: \"Equals\",\r\n       conditionValue: \"1\",\r\n       transition: transitionUUIDs[0].uuid\r\n     }] */\r\n\r\n\r\n    let key = `${question.category}_${question.id}`\r\n    dispatch(addKey(key))\r\n\r\n    const blyatUUID = uuid()\r\n\r\n    let contactFlowAttribute = ContactFlowAttribute({\r\n      ownUUID: blyatUUID,\r\n      errorUUID: errorUUID,\r\n      key: key,\r\n      value: 0,\r\n      positionX: positionX + 250,\r\n      positionY: positionY + 0 * 200,\r\n      transitionUUID: transitionUUIDs[0].uuid\r\n    })\r\n    modules.push(contactFlowAttribute)\r\n\r\n\r\n    dynamicBranches = [\r\n\r\n    ]\r\n    staticBranches = [\r\n      {\r\n        condition: \"Timeout\",\r\n        transition: repeatUUID\r\n      },\r\n      {\r\n        condition: \"NoMatch\",\r\n        transition: blyatUUID\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ]\r\n  }\r\n\r\n  const branches = [...dynamicBranches, ...staticBranches]\r\n\r\n  //console.log({question})\r\n\r\n  let useFullText = question.hasOwnProperty(\"options\") ? generateTextFromOptions(question) : `<speak>${question.text}</speak>`\r\n\r\n  return {\r\n    id: ownUUID,\r\n    type: \"GetUserInput\",\r\n    branches: branches,\r\n    parameters: [\r\n      {\r\n        name: \"Text\",\r\n        value: useFullText,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TextToSpeechType\",\r\n        value: \"ssml\"\r\n      },\r\n      {\r\n        name: \"Timeout\",\r\n        value: \"5\"\r\n      },\r\n      {\r\n        name: \"MaxDigits\",\r\n        value: maxDigits\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      conditionMetadata: conditionMetadata,\r\n      useDynamic: useDynamic\r\n    },\r\n    target: \"Digits\"\r\n  }\r\n}\r\n\r\nContactFlowUserInput.propTypes = propTypes\r\nContactFlowUserInput.defaultProps = defaultProps\r\n\r\nexport default ContactFlowUserInput","import { uuid } from \"uuidv4\"\r\nimport PropTypes from \"prop-types\"\r\nimport { EmptyContactFlow } from \"./emptycontactflow\"\r\nimport { ContactFlowError } from \"./contactflowerror\"\r\nimport { ContactFlowEnd } from \"./contactflowend\"\r\nimport { ContactFlowTransfer } from \"./contactflowtransfer\"\r\nimport { ContactFlowLogging } from \"./contactflowlogging\"\r\nimport { ContactFlowVoice } from \"./contactflowvoice\"\r\nimport { ContactFlowPlayPrompt } from \"./contactflowplayprompt\"\r\n\r\n\r\nexport const defaultProps = {\r\n  name: \"generated_charite_data_start\"\r\n}\r\n\r\nexport const propTypes = {\r\n  name: PropTypes.string\r\n}\r\n\r\n\r\nexport const ContactFlowStaticStart = ({\r\n    name = defaultProps.name\r\n  }) => {\r\n    const loggingUUUID = uuid()\r\n    const startErrorUUID = uuid()\r\n    const startEndUUID = uuid()\r\n    const startTransferUUID = uuid()\r\n    const voiceUUID = uuid()\r\n    const greetingUUID = uuid()\r\n\r\n    const staticStart = EmptyContactFlow({\r\n      startUUID: loggingUUUID,\r\n      name: name\r\n    })\r\n    const startModules = []\r\n\r\n    const startError = ContactFlowError({\r\n      ownUUID: startErrorUUID,\r\n      transitionUUID: startEndUUID\r\n    })\r\n    startModules.push(startError)\r\n\r\n    const startEnd = ContactFlowEnd({\r\n      ownUUID: startEndUUID\r\n    })\r\n    startModules.push(startEnd)\r\n\r\n    const startTransfer = ContactFlowTransfer({\r\n      ownUUID: startTransferUUID,\r\n      transitionUUID: voiceUUID,\r\n      errorUUID: startErrorUUID\r\n    })\r\n    startModules.push(startTransfer)\r\n\r\n    const startLogging = ContactFlowLogging({\r\n      ownUUID: loggingUUUID,\r\n      transitionUUID: voiceUUID,\r\n      errorUUID: startErrorUUID\r\n    })\r\n    startModules.push(startLogging)\r\n\r\n    const startVoice = ContactFlowVoice({\r\n      ownUUID: voiceUUID,\r\n      transitionUUID: greetingUUID,\r\n      errorUUID: startErrorUUID\r\n    })\r\n    startModules.push(startVoice)\r\n\r\n    const startGreeting = ContactFlowPlayPrompt({\r\n      ownUUID: greetingUUID,\r\n      transitionUUID: startTransferUUID,\r\n      errorUUID: startErrorUUID,\r\n      text: \"miau\"\r\n    })\r\n    startModules.push(startGreeting)\r\n\r\n    staticStart.modules = startModules\r\n\r\n    return staticStart\r\n}\r\n\r\nContactFlowStaticStart.propTypes = propTypes\r\nContactFlowStaticStart.defaultProps = defaultProps\r\n\r\nexport default ContactFlowStaticStart","import PropTypes from \"prop-types\"\r\nimport { uuid } from \"uuidv4\"\r\nimport { EmptyContactFlow } from \"./emptycontactflow\"\r\nimport { ContactFlowError } from \"./contactflowerror\"\r\nimport { ContactFlowEnd } from \"./contactflowend\"\r\nimport { ContactFlowInvokeExternal } from \"./contactflowinvokeexternal\"\r\nimport { ContactFlowAttribute } from \"./contactflowattribute\"\r\nimport { ContactFlowPlayPrompt } from \"./contactflowplayprompt\"\r\n\r\nexport const defaultProps = {\r\n  name: \"generated_charite_data_29\"\r\n}\r\n\r\nexport const propTypes = {\r\n  getState: PropTypes.func.isRequired,\r\n  name: PropTypes.string\r\n}\r\n\r\n\r\nexport const ContactFlowStaticEnd = ({\r\n    getState,\r\n    name = defaultProps.name\r\n  }) => {\r\n\r\n    const finishUUID = uuid()\r\n    const endErrorUUID = uuid()\r\n    const lambdaUUID = uuid()\r\n    const recomUUID = uuid()\r\n    const recomSpeechUUID = uuid()\r\n\r\n    const staticEnd = EmptyContactFlow({\r\n      startUUID: lambdaUUID,\r\n      name: name\r\n    })\r\n    const endModules = []\r\n\r\n    const endError = ContactFlowError({\r\n      ownUUID: endErrorUUID,\r\n      transitionUUID: finishUUID\r\n    })\r\n    endModules.push(endError)\r\n\r\n    const finishLine = ContactFlowEnd(finishUUID)\r\n    endModules.push(finishLine)\r\n\r\n    const finalState = getState()\r\n    const lambdaKeys = finalState.creator.lambdaKeys.lambdaKeys\r\n\r\n    const lambdaCall = ContactFlowInvokeExternal({\r\n      ownUUID: lambdaUUID,\r\n      errorUUID: endErrorUUID,\r\n      lambdaKeys: lambdaKeys,\r\n      transitionUUID: recomUUID\r\n    })\r\n    endModules.push(lambdaCall)\r\n\r\n    const recomAttr = ContactFlowAttribute({\r\n      ownUUID: recomUUID,\r\n      errorUUID: endErrorUUID,\r\n      value: \"$.External.recommendation\",\r\n      key: \"recommendation\",\r\n      positionX: 400,\r\n      positionY: 400,\r\n      transitionUUID: recomSpeechUUID\r\n    })\r\n    endModules.push(recomAttr)\r\n\r\n    const recomVoice = ContactFlowPlayPrompt({\r\n      ownUUID: recomSpeechUUID,\r\n      transitionUUID: finishUUID,\r\n      errorUUID: endErrorUUID,\r\n      text: \"$.External.word1 und $.External.word2\"\r\n    })\r\n    endModules.push(recomVoice)\r\n\r\n    staticEnd.modules = endModules\r\n\r\n    return staticEnd\r\n}\r\n\r\nContactFlowStaticEnd.propTypes = propTypes\r\nContactFlowStaticEnd.defaultProps = defaultProps\r\n\r\nexport default ContactFlowStaticEnd","import PropTypes from \"prop-types\"\r\nimport { uuid } from \"uuidv4\"\r\nimport { EmptyContactFlow } from \"./emptycontactflow\"\r\nimport { ContactFlowEnd } from \"./contactflowend\"\r\nimport { ContactFlowRepeat } from \"./contactflowrepeat\"\r\nimport { ContactFlowError } from \"./contactflowerror\"\r\nimport { ContactFlowTransfer } from \"./contactflowtransfer\"\r\nimport { ContactFlowUserInput } from \"./contactflowuserinput\"\r\n\r\nexport const defaultProps = {\r\n  positionX: 820,\r\n  positionY: 20\r\n}\r\n\r\nexport const propTypes = {\r\n  dispatch: PropTypes.func.isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number\r\n}\r\n\r\nexport const ContactFlowQuestion = ({\r\n    dispatch, uuidMap, xxxMap, question, index, addKey, name,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY\r\n  }) => {\r\n\r\n      const endUUID = uuid()\r\n      const repeatUUID = uuid()\r\n      const errorUUID = uuid()\r\n\r\n      let transferUUIDs \r\n      if (question.nextQuestionMap !== undefined) {\r\n        let someUUIDs = Array.from(new Set(question.nextQuestionMap.map(q => {\r\n          return {uuid: uuid(), key: q}\r\n        })))\r\n        transferUUIDs = question.nextQuestionMap.map(q => {\r\n          return someUUIDs.find(u => u.key === q)\r\n        })\r\n      }\r\n      else {\r\n        let singleTransferUUID = {uuid: uuid(), key: question.id}\r\n        if (question.hasOwnProperty(\"options\")) {\r\n          transferUUIDs = question.options.map(q => singleTransferUUID)\r\n        } else {\r\n          transferUUIDs = [singleTransferUUID]\r\n        }\r\n      }\r\n\r\n      transferUUIDs = Array.from(transferUUIDs)\r\n\r\n      const contactFlowQuestion = EmptyContactFlow({\r\n        name: name,\r\n        startUUID: uuidMap[question.id]\r\n      })\r\n      const modules = []\r\n\r\n      const contactFlowEnd = ContactFlowEnd({ownUUID:endUUID})\r\n      modules.push(contactFlowEnd)\r\n\r\n      const contactFlowRepeat = ContactFlowRepeat({\r\n        ownUUID: repeatUUID,\r\n        transitionUUID: uuidMap[question.id],\r\n        positionX: positionX,\r\n        positionY: positionY + 200\r\n      })\r\n      modules.push(contactFlowRepeat)\r\n\r\n      const contactFlowError = ContactFlowError({\r\n        ownUUID: errorUUID,\r\n        transitionUUID: endUUID\r\n      })\r\n      modules.push(contactFlowError)\r\n\r\n      Array.from(new Set(transferUUIDs)).forEach(t => {\r\n\r\n        let current = xxxMap.find(u => u.key === t.key)\r\n        let currentIndex = xxxMap.indexOf(current)\r\n        let nextIndex = currentIndex + 1\r\n        // TODO: clean up this mess....\r\n        let fooName\r\n        if(question.id === xxxMap.slice(-1)[0].key) {\r\n          fooName = \"end\"\r\n        } else {\r\n          console.log(t.key === xxxMap.slice(-1)[0].key)\r\n          console.log(t.key, xxxMap, Array.from(new Set(transferUUIDs)))\r\n          // Set only 1 element? use xxxMap[next] else t.key\r\n          fooName =  Array.from(new Set(transferUUIDs)).length === 1 ? xxxMap[nextIndex].key : t.key\r\n        } \r\n        console.log(`${question.id} leads to ${fooName}`)\r\n\r\n        const contactFlowTransfer = ContactFlowTransfer({\r\n          ownUUID: t.uuid,\r\n          errorUUID: errorUUID,\r\n          resourceName: `automated_charite_data_${fooName}`\r\n          //resourceName: `automated_charite_data_${t.key}`\r\n        })\r\n        modules.push(contactFlowTransfer)\r\n      })\r\n\r\n      let optionsUUIDMap = {}\r\n\r\n      if (question.hasOwnProperty(\"options\")) {\r\n        question.options.forEach((option,i) => {\r\n          optionsUUIDMap[i] = uuid()\r\n        })\r\n      } else {\r\n        optionsUUIDMap[0] = uuid()\r\n      }\r\n\r\n      console.log(\"the quest\", question)\r\n\r\n      const contactFlowUserInput = ContactFlowUserInput({\r\n        ownUUID: uuidMap[question.id],\r\n        errorUUID: errorUUID,\r\n        repeatUUID: repeatUUID,\r\n        question: question,\r\n        transitionUUIDs: transferUUIDs,\r\n        uuidMap: uuidMap,\r\n        optionsUUIDMap: optionsUUIDMap,\r\n        modules: modules,\r\n        positionX: positionX,\r\n        positionY: positionY,\r\n        dispatch: dispatch,\r\n        addKey: addKey,\r\n        maxDigits: question.inputType === \"radio\" ? \"1\" : \"3\"\r\n      })\r\n      modules.push(contactFlowUserInput)\r\n\r\n      contactFlowQuestion.modules = modules\r\n\r\n    return contactFlowQuestion\r\n}","//import PropTypes from \"prop-types\"\r\nimport { uuid } from \"uuidv4\"\r\nimport { ContactFlowAttribute } from \"./contactflowattribute\"\r\n\r\nexport const defaultProps = {\r\n  positionX: 800,\r\n  positionY: 800\r\n}\r\n\r\nexport const propTypes = {\r\n}\r\n\r\nexport const generateTextFromOptions = question => {\r\n  let text = `${question.text} <break time=\"1s\" />`\r\n  return `<speak>${text}</speak>`\r\n}\r\n\r\n\r\nexport const ContactFlowStore = ({\r\n  question,\r\n  ownUUID,\r\n  repeatUUID,\r\n  errorUUID,\r\n  transitionUUIDs,\r\n  optionsUUIDMap,\r\n  modules,\r\n  positionX,\r\n  positionY,\r\n  dispatch,\r\n  addKey\r\n  //useDynamic = defaultProps.useDynamic,\r\n  //maxDigits = defaultProps.maxDigits\r\n}) => {\r\n  let key = `${question.category}_${question.id}`\r\n  dispatch(addKey(key))\r\n\r\n  const blyatUUID = uuid()\r\n\r\n  let contactFlowAttribute = ContactFlowAttribute({\r\n    ownUUID: blyatUUID,\r\n    errorUUID: errorUUID,\r\n    key: key,\r\n    value: \"Stored customer input\",\r\n    positionX: positionX + 250,\r\n    positionY: positionY + 0 * 200,\r\n    transitionUUID: transitionUUIDs[0].uuid,\r\n    namespace: \"System\"\r\n  })\r\n  modules.push(contactFlowAttribute)\r\n  let useFullText = generateTextFromOptions(question)\r\n  console.log(useFullText)\r\n  const wtf = {\r\n    id: ownUUID,\r\n    type: \"StoreUserInput\",\r\n    branches: [\r\n      {\r\n        condition: \"Success\",\r\n        transition: blyatUUID//transitionUUIDs[0].uuid\r\n      },\r\n      {\r\n        condition: \"Error\",\r\n        transition: errorUUID\r\n      }\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"Text\",\r\n        value: useFullText,\r\n        namespace: null\r\n      },\r\n      {\r\n        name: \"TextToSpeechType\",\r\n        value: \"ssml\"\r\n      },\r\n      {\r\n        name: \"CustomerInputType\",\r\n        value: \"Custom\"\r\n      },\r\n      {\r\n        name: \"Timeout\",\r\n        value: \"5\"\r\n      },\r\n      {\r\n        name: \"MaxDigits\",\r\n        value: 5\r\n      },\r\n      {\r\n        name: \"EncryptEntry\",\r\n        value: false\r\n      },\r\n      {\r\n        name: \"DisableCancel\",\r\n        value: false\r\n      }\r\n    ],\r\n    metadata: {\r\n      position: {\r\n        x: positionX,\r\n        y: positionY\r\n      },\r\n      useDynamic: false,\r\n      useDynamicForEncryptionKeys: true,\r\n      useDynamicForTerminatorDigits: false,\r\n      countryCodePrefix: \"+1\"\r\n    }\r\n  }\r\n  console.log(wtf)\r\n  return wtf\r\n}\r\n\r\nContactFlowStore.propTypes = propTypes\r\nContactFlowStore.defaultProps = defaultProps\r\n\r\nexport default ContactFlowStore","import PropTypes from \"prop-types\"\r\nimport { uuid } from \"uuidv4\"\r\nimport { EmptyContactFlow } from \"./emptycontactflow\"\r\nimport { ContactFlowEnd } from \"./contactflowend\"\r\nimport { ContactFlowRepeat } from \"./contactflowrepeat\"\r\nimport { ContactFlowError } from \"./contactflowerror\"\r\nimport { ContactFlowTransfer } from \"./contactflowtransfer\"\r\nimport { ContactFlowStore } from \"./contactflowstore\"\r\n\r\nexport const defaultProps = {\r\n  positionX: 820,\r\n  positionY: 20\r\n}\r\n\r\nexport const propTypes = {\r\n  dispatch: PropTypes.func.isRequired,\r\n  positionX: PropTypes.number,\r\n  positionY: PropTypes.number\r\n}\r\n\r\nexport const ContactFlowQuestionDate = ({\r\n    dispatch, uuidMap, xxxMap, question, index, addKey, name,\r\n    positionX = defaultProps.positionX,\r\n    positionY = defaultProps.positionY\r\n  }) => {\r\n\r\n      const endUUID = uuid()\r\n      const repeatUUID = uuid()\r\n      const errorUUID = uuid()\r\n\r\n      let transferUUIDs \r\n      if (question.nextQuestionMap !== undefined) {\r\n        let someUUIDs = Array.from(new Set(question.nextQuestionMap.map(q => {\r\n          return {uuid: uuid(), key: q}\r\n        })))\r\n        transferUUIDs = question.nextQuestionMap.map(q => {\r\n          return someUUIDs.find(u => u.key === q)\r\n        })\r\n      }\r\n      else {\r\n        let singleTransferUUID = {uuid: uuid(), key: question.id}\r\n        if (question.hasOwnProperty(\"options\")) {\r\n          transferUUIDs = question.options.map(q => singleTransferUUID)\r\n        } else {\r\n          transferUUIDs = [singleTransferUUID]\r\n        }\r\n      }\r\n\r\n      transferUUIDs = Array.from(transferUUIDs)\r\n\r\n      const contactFlowQuestion = EmptyContactFlow({\r\n        name: name,\r\n        startUUID: uuidMap[question.id]\r\n      })\r\n      const modules = []\r\n\r\n      const contactFlowEnd = ContactFlowEnd({ownUUID:endUUID})\r\n      modules.push(contactFlowEnd)\r\n\r\n      const contactFlowRepeat = ContactFlowRepeat({\r\n        ownUUID: repeatUUID,\r\n        transitionUUID: uuidMap[question.id],\r\n        positionX: positionX,\r\n        positionY: positionY + 200\r\n      })\r\n      modules.push(contactFlowRepeat)\r\n\r\n      const contactFlowError = ContactFlowError({\r\n        ownUUID: errorUUID,\r\n        transitionUUID: endUUID\r\n      })\r\n      modules.push(contactFlowError)\r\n\r\n      Array.from(new Set(transferUUIDs)).forEach(t => {\r\n\r\n        let current = xxxMap.find(u => u.key === t.key)\r\n        let currentIndex = xxxMap.indexOf(current)\r\n        let nextIndex = currentIndex + 1\r\n        // TODO: clean up this mess....\r\n        let fooName\r\n        if(question.id === xxxMap.slice(-1)[0].key) {\r\n          fooName = \"end\"\r\n        } else {\r\n          console.log(t.key === xxxMap.slice(-1)[0].key)\r\n          console.log(t.key, xxxMap, Array.from(new Set(transferUUIDs)))\r\n          // Set only 1 element? use xxxMap[next] else t.key\r\n          fooName =  Array.from(new Set(transferUUIDs)).length === 1 ? xxxMap[nextIndex].key : t.key\r\n        } \r\n        console.log(`${question.id} leads to ${fooName}`)\r\n\r\n        const contactFlowTransfer = ContactFlowTransfer({\r\n          ownUUID: t.uuid,\r\n          errorUUID: errorUUID,\r\n          resourceName: `automated_charite_data_${fooName}`\r\n          //resourceName: `automated_charite_data_${t.key}`\r\n        })\r\n        modules.push(contactFlowTransfer)\r\n      })\r\n\r\n      let optionsUUIDMap = {}\r\n\r\n      if (question.hasOwnProperty(\"options\")) {\r\n        question.options.forEach((option,i) => {\r\n          optionsUUIDMap[i] = uuid()\r\n        })\r\n      } else {\r\n        optionsUUIDMap[0] = uuid()\r\n      }\r\n\r\n      console.log(\"the quest\", question)\r\n\r\n      const contactFlowStore = ContactFlowStore({\r\n        ownUUID: uuidMap[question.id],\r\n        errorUUID: errorUUID,\r\n        repeatUUID: repeatUUID,\r\n        question: question,\r\n        transitionUUIDs: transferUUIDs,\r\n        uuidMap: uuidMap,\r\n        optionsUUIDMap: optionsUUIDMap,\r\n        modules: modules,\r\n        positionX: positionX,\r\n        positionY: positionY,\r\n        dispatch: dispatch,\r\n        addKey: addKey,\r\n        maxDigits: question.inputType === \"radio\" ? \"1\" : \"3\"\r\n      })\r\n      modules.push(contactFlowStore)\r\n\r\n      contactFlowQuestion.modules = modules\r\n\r\n    return contactFlowQuestion\r\n}","import { EmptyContactFlow } from \"./emptycontactflow\"\r\nimport { ContactFlowError } from \"./contactflowerror\"\r\nimport { ContactFlowEnd } from \"./contactflowend\"\r\nimport { ContactFlowTransfer } from \"./contactflowtransfer\"\r\nimport { ContactFlowLogging } from \"./contactflowlogging\"\r\nimport { ContactFlowVoice } from \"./contactflowvoice\"\r\nimport { ContactFlowPlayPrompt} from \"./contactflowplayprompt\"\r\nimport { ContactFlowRepeat } from \"./contactflowrepeat\"\r\nimport { ContactFlowAttribute } from \"./contactflowattribute\"\r\nimport { ContactFlowInvokeExternal } from \"./contactflowinvokeexternal\"\r\nimport { ContactFlowUserInput } from \"./contactflowuserinput\"\r\nimport { ContactFlowStaticStart } from \"./contactflowstaticstart\"\r\nimport { ContactFlowStaticEnd } from \"./contactflowstaticend\"\r\nimport { ContactFlowQuestion } from \"./contactflowquestion\"\r\nimport { ContactFlowQuestionDate } from \"./contactflowquestiondate\"\r\nimport { ContactFlowStore } from \"./contactflowstore\"\r\n\r\nexport const ContactFlow = {\r\n  EmptyContactFlow,\r\n  ContactFlowError,\r\n  ContactFlowEnd,\r\n  ContactFlowTransfer,\r\n  ContactFlowLogging,\r\n  ContactFlowVoice,\r\n  ContactFlowPlayPrompt,\r\n  ContactFlowRepeat,\r\n  ContactFlowAttribute,\r\n  ContactFlowInvokeExternal,\r\n  ContactFlowUserInput,\r\n  ContactFlowStaticStart,\r\n  ContactFlowStaticEnd,\r\n  ContactFlowQuestion,\r\n  ContactFlowQuestionDate,\r\n  ContactFlowStore\r\n}\r\n\r\nexport default ContactFlow\r\n","//import { Guard, Condition, Disjunction } from './guard';\r\n\r\n/* export type Question = {\r\n  id: string;\r\n  category: string;\r\n  comment?: string;\r\n  text: string;\r\n  inputType: 'radio' | 'date';\r\n  options?: string[];\r\n  nextQuestionMap?: string | string[];\r\n  scoreMap?: number[];\r\n  guard?: Guard;\r\n}; */\r\n\r\nexport const CATEGORIES = {\r\n  PERSONAL: 'personalInfo',\r\n  CONTACT: 'contact',\r\n  SYMPTOMS: 'symptoms',\r\n  RESPIRATORY_SYMPTOMS: 'respiratorySymptoms',\r\n  ILLNESS: 'illnesses',\r\n  MEDICATION: 'medication',\r\n};\r\n\r\nexport const QUESTION = {\r\n  AGE: 'P0',\r\n  ABOVE_65: 'P1',\r\n  LIVING_SITUATION: 'P2',\r\n  CARING: 'P3',\r\n  WORKSPACE: 'P4',\r\n  CONTACT_DATE: 'CZ',\r\n  OUT_OF_BREATH: 'SB',\r\n  SYMPTOM_DATE: 'SZ',\r\n};\r\n\r\nexport const QUESTIONNAIRE_ORDER = [\r\n  {\r\n    id: QUESTION.AGE,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P0_text',\r\n    inputType: 'radio',\r\n    options: [\r\n      'q_P0_option0',\r\n      'q_P0_option1',\r\n      'q_P0_option2',\r\n      'q_P0_option3',\r\n      'q_P0_option4',\r\n      'q_P0_option5',\r\n    ],\r\n    nextQuestionMap: ['P2', 'P2', 'P2', 'P1', 'P2', 'P2'],\r\n  },\r\n  {\r\n    id: QUESTION.ABOVE_65,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P1_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n  },\r\n  {\r\n    id: QUESTION.LIVING_SITUATION,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P2_text',\r\n    inputType: 'radio',\r\n    options: ['q_P2_option0', 'q_P2_option1'],\r\n  },\r\n  {\r\n    id: QUESTION.CARING,\r\n    category: CATEGORIES.PERSONAL,\r\n    comment: 'q_P3_comment',\r\n    text: 'q_P3_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n  },\r\n  {\r\n    id: QUESTION.WORKSPACE,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P4_text',\r\n    inputType: 'radio',\r\n    options: ['q_P4_option0', 'q_P4_option1', 'q_P4_option2'],\r\n  },\r\n  {\r\n    id: 'P5',\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P5_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n  },\r\n  {\r\n    id: 'P6',\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P6_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'C0',\r\n    category: CATEGORIES.CONTACT,\r\n    comment: 'q_C0_comment',\r\n    text: 'q_C0_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    nextQuestionMap: ['CZ', 'S0'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: QUESTION.CONTACT_DATE,\r\n    category: CATEGORIES.CONTACT,\r\n    text: 'q_CZ_text',\r\n    inputType: 'date',\r\n  },\r\n  {\r\n    id: 'S0',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    comment: null,\r\n    text: 'q_S0_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    nextQuestionMap: ['S2', 'S1'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S1',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    comment: null,\r\n    text: 'q_S1_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    nextQuestionMap: ['S2', 'S3'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S2',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    comment: null,\r\n    text: 'q_S2_text',\r\n    inputType: 'radio',\r\n    options: [\r\n      '',\r\n      'q_S2_option1',\r\n      'q_S2_option2',\r\n      'q_S2_option3',\r\n      'q_S2_option4',\r\n      'q_S2_option5',\r\n      'q_S2_option6',\r\n      'q_S2_option7',\r\n    ],\r\n  },\r\n  {\r\n    id: 'S3',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_S3_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S4',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_S4_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S5',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_S5_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S6',\r\n    category: CATEGORIES.RESPIRATORY_SYMPTOMS,\r\n    comment: 'q_S6_comment',\r\n    text: 'q_S6_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S7',\r\n    category: CATEGORIES.RESPIRATORY_SYMPTOMS,\r\n    comment: 'q_S7_comment',\r\n    text: 'q_S7_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S8',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    comment: 'q_S8_comment',\r\n    text: 'q_S8_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'S9',\r\n    category: CATEGORIES.RESPIRATORY_SYMPTOMS,\r\n    text: 'q_S9_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'SA',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_SA_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: QUESTION.OUT_OF_BREATH,\r\n    category: CATEGORIES.RESPIRATORY_SYMPTOMS,\r\n    comment: 'q_SB_comment',\r\n    text: 'q_SB_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: 'SC',\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_SC_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n    scoreMap: [1, 0],\r\n  },\r\n  {\r\n    id: QUESTION.SYMPTOM_DATE,\r\n    category: CATEGORIES.SYMPTOMS,\r\n    text: 'q_SZ_text',\r\n    inputType: 'date'/* ,\r\n    guard: new Disjunction([\r\n      new Condition(CATEGORIES.SYMPTOMS, 1, null),\r\n      new Condition(CATEGORIES.RESPIRATORY_SYMPTOMS, 1, null),\r\n    ]), */\r\n  },\r\n  {\r\n    id: 'D0',\r\n    category: CATEGORIES.ILLNESS,\r\n    text: 'q_D0_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'D1',\r\n    category: CATEGORIES.ILLNESS,\r\n    text: 'q_D1_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'D2',\r\n    category: CATEGORIES.ILLNESS,\r\n    text: 'q_D2_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'D3',\r\n    category: CATEGORIES.ILLNESS,\r\n    text: 'q_D3_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'M0',\r\n    category: CATEGORIES.MEDICATION,\r\n    text: 'q_M0_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'M1',\r\n    category: CATEGORIES.MEDICATION,\r\n    comment: 'q_M1_comment',\r\n    text: 'q_M1_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no', 'answer_unknown'],\r\n  },\r\n  {\r\n    id: 'M2',\r\n    category: CATEGORIES.MEDICATION,\r\n    text: 'q_M2_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n  },\r\n];\r\n\r\nexport const QUESTIONNAIRE_ORDER_SMALL = [\r\n  {\r\n    id: QUESTION.AGE,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P0_text',\r\n    inputType: 'radio',\r\n    options: [\r\n      'q_P0_option0',\r\n      'q_P0_option1',\r\n      'q_P0_option2',\r\n      'q_P0_option3',\r\n      'q_P0_option4',\r\n      'q_P0_option5',\r\n    ],\r\n    nextQuestionMap: ['P2', 'P2', 'P2', 'P1', 'P2', 'P2'],\r\n  },\r\n  {\r\n    id: QUESTION.ABOVE_65,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P1_text',\r\n    inputType: 'radio',\r\n    options: ['answer_yes', 'answer_no'],\r\n  },\r\n  {\r\n    id: QUESTION.LIVING_SITUATION,\r\n    category: CATEGORIES.PERSONAL,\r\n    text: 'q_P2_text',\r\n    inputType: 'radio',\r\n    options: ['q_P2_option0', 'q_P2_option1'],\r\n  },\r\n  {\r\n    id: QUESTION.CONTACT_DATE,\r\n    category: CATEGORIES.CONTACT,\r\n    text: 'q_CZ_text',\r\n    inputType: 'date',\r\n  }\r\n]\r\n","\r\nimport QUESTIONNAIRE_DE from \"./de\"\r\nimport QUESTIONNAIRE_EN from \"./en\"\r\n\r\nexport const QUESTIONNAIRE = {\r\n  de: QUESTIONNAIRE_DE,\r\n  en: QUESTIONNAIRE_EN\r\n}","//import fetch from \"cross-fetch\"\r\nimport { uuid } from \"uuidv4\"\r\nimport fileDownload from \"js-file-download\"\r\nimport JSZip from \"jszip\"\r\nimport {\r\n  setQuestionnaireStrings,\r\n  setQuestionnaireOrder,\r\n  setLanguage,\r\n  setCreatedJSON,\r\n  setAmazonConnectData,\r\n  addKey,\r\n  setQuestionCount\r\n} from \"./actions\"\r\n\r\nimport cf from \"./amazon-connect/contactflow\"\r\n\r\nimport { QUESTIONNAIRE_ORDER } from \"./foo\" /* \"./questionnaire_order\" */\r\nimport { QUESTIONNAIRE } from  \"./bar\" /* \"./questionnaire_strings\" */\r\n\r\n// TODO: implement a real fetch from  https://covapp.charite.de/\r\nexport const fetchData = () => {\r\n    (async () => {\r\n      try {\r\n        const res = await fetch(\"https://covapp.charite.de/\");\r\n        \r\n        if (res.status >= 400) {\r\n          throw new Error(\"Bad response from server\");\r\n        }\r\n        \r\n        const user = await res.text();\r\n        console.log(res)\r\n        //console.log(url)\r\n        console.log(user);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    })()\r\n}\r\n\r\nexport const fetchDataMock = url => {\r\n  return dispatch => {\r\n    if (url === 'stringMap') {\r\n      dispatch(setQuestionnaireStrings(QUESTIONNAIRE))\r\n    } else {\r\n      dispatch(setQuestionnaireOrder(QUESTIONNAIRE_ORDER))\r\n    }\r\n  }\r\n}\r\n\r\nexport const getQuestionsAndGenerateJSONMock = url => {\r\n  return dispatch => {\r\n    dispatch(setQuestionnaireStrings(QUESTIONNAIRE))\r\n    dispatch(setQuestionnaireOrder(QUESTIONNAIRE_ORDER))\r\n    dispatch(createJSON())\r\n  }\r\n}\r\n\r\nexport const handleLanguageChange = language => {\r\n  return dispatch => {\r\n    dispatch(setLanguage(language))\r\n  }\r\n}\r\n\r\nexport const createRadioQuestion = (question, strings) => {\r\n  let options = question.options.map(option => strings[option])\r\n  return Object.assign({}, question, {\r\n    id: question.id,\r\n    text: strings[question.text],\r\n    options: options,\r\n    nextQuestionMap: question.nextQuestionMap,\r\n    comment: strings[question.comment]\r\n  })\r\n}\r\n\r\nexport const createDateQuestion = (question, strings) => {\r\n  return Object.assign({}, question, {\r\n    id: question.id,\r\n    text: strings[question.text]\r\n  })\r\n}\r\n\r\nexport const createJSON = () => {\r\n  return (dispatch, getState) => {\r\n    const state = getState()\r\n    const { order, stringMap, language } = state.creator\r\n    const strings = stringMap[language].keys\r\n    const data = order.map(question => {\r\n\r\n      if (question.inputType === 'date') {\r\n        return createDateQuestion(question, strings)\r\n      } else {\r\n        return createRadioQuestion(question, strings)\r\n      }\r\n    })\r\n    dispatch(setCreatedJSON(data))\r\n  }\r\n}\r\n\r\nexport const downloadJSON = (jsonMap, language) => {\r\n  const zip = new JSZip();\r\n \r\n\r\n  Object.keys(jsonMap).forEach((key, x) => {\r\n      zip.file(`${key}_${language}.json`, JSON.stringify(jsonMap[key], null, 4))\r\n      //fileDownload(JSON.stringify(jsonMap[key], null, 4), `${key}.json`)\r\n\r\n  })\r\n  zip.generateAsync({type:\"blob\"}).then(function(content) {\r\n    // see FileSaver.js\r\n    fileDownload(content, \"example.zip\");\r\n  });\r\n  \r\n  return {type: ''}\r\n}\r\n\r\nexport const handleQuestionCount = questionCount => {\r\n  return dispatch => {\r\n    dispatch(setQuestionCount(questionCount))\r\n  }\r\n}\r\n\r\nexport const createContactFlow = () => {\r\n  return (dispatch, getState) => {\r\n    let state = getState()\r\n    //const questions = [ state.creator.chariteData[0]]\r\n    const questions = state.creator.chariteData\r\n    \r\n    const questionIDList = []\r\n    questions.forEach(question => {\r\n      questionIDList.push(question.id)\r\n    })\r\n\r\n    const questionIDSet = new Set(questionIDList)\r\n    const uuidMap = {}\r\n    const xxxMap = Array.from(new Set(questionIDList.map(q => {return {key: q, uuid: uuid()}})))\r\n\r\n    // Set sadly has no map method :(\r\n    questionIDSet.forEach(id => {\r\n      uuidMap[id] =  uuid()\r\n    })\r\n    console.log({uuidMap, xxxMap})\r\n\r\n    let qCount = 0\r\n\r\n    questions.forEach((question, i) => {\r\n      \r\n      const contactFlowName = `automated_charite_data_${question.id}`\r\n      let contactFlow\r\n      if (question.inputType === 'radio') {\r\n        contactFlow = cf.ContactFlowQuestion({\r\n          name: contactFlowName,\r\n          getState: getState,\r\n          uuidMap: uuidMap,\r\n          xxxMap: xxxMap,\r\n          question: question,\r\n          index: i,\r\n          addKey: addKey,\r\n          dispatch: dispatch\r\n        })\r\n      } else {\r\n        contactFlow = cf.ContactFlowQuestionDate({\r\n          name: contactFlowName,\r\n          getState: getState,\r\n          uuidMap: uuidMap,\r\n          xxxMap: xxxMap,\r\n          question: question,\r\n          index: i,\r\n          addKey: addKey,\r\n          dispatch: dispatch\r\n        })\r\n      }\r\n      \r\n      qCount++\r\n      dispatch(setAmazonConnectData({[contactFlowName]: contactFlow}))\r\n    })\r\n    dispatch(setQuestionCount(qCount))\r\n\r\n    const staticStartName = \"automated_charite_data_start\"\r\n    const staticStart = cf.ContactFlowStaticStart({name: staticStartName})\r\n    dispatch(setAmazonConnectData({[staticStartName]: staticStart}))    \r\n\r\n    state = getState()\r\n\r\n    const staticEndName = \"automated_charite_data_end\"\r\n    const staticEnd = cf.ContactFlowStaticEnd({name: staticEndName, getState: getState})\r\n    dispatch(setAmazonConnectData({[staticEndName]: staticEnd}))\r\n  }\r\n}","import { connect } from \"react-redux\"\r\nimport AmazonConnectConfiguratorComponent from \"./AmazonConnectConfiguratorComponent\"\r\n\r\nimport { \r\n  createJSON,\r\n  downloadJSON,\r\n  createContactFlow\r\n} from \"./duck/operations\"\r\n\r\nexport const mapStateToProps = (state, ownProps) => ({\r\n  chariteData: state.creator.chariteData,\r\n  connectConf: state.creator.connectConf,\r\n  lambdaKeys: state.creator.lambdaKeys,\r\n  language: state.creator.language\r\n})\r\n\r\nexport const mapDispatchToProps = {\r\n  createJSON,\r\n  createContactFlow,\r\n  downloadJSON\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AmazonConnectConfiguratorComponent)","import React from \"react\"\r\nimport Container from \"react-bootstrap/Container\"\r\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\"\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Form from \"react-bootstrap/Form\"\r\nimport Accordion from \"react-bootstrap/Accordion\"\r\nimport Card from \"react-bootstrap/Card\"\r\n\r\nimport  AmazonSettings from \"./AmazonConnectConfiguratorContainer\" \r\n\r\n\r\nexport const defaultProps = {\r\n  availableLanguages: [\r\n    {key: 'en', display: 'English'},\r\n    {key: 'de', display: 'Deutsch'}\r\n  ]\r\n}\r\n\r\nexport const CreatorComponent = props => {\r\n\r\n  const {\r\n    order,\r\n    stringMap,\r\n    getQuestionsAndGenerateJSONMock,\r\n    availableLanguages,\r\n    handleLanguageChange,\r\n    language,\r\n    chariteData,\r\n    connectConf,\r\n  } = props\r\n\r\n  const bla = {\r\n    stringMap: stringMap[language],\r\n    order: order,\r\n    chariteData: chariteData,\r\n    connectConf: connectConf\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Hello World</h1>\r\n      <ButtonToolbar>\r\n        <ButtonGroup className=\"mr-2\" size=\"sm\">\r\n        {\r\n          // TODO: use something else instead of buttons\r\n          availableLanguages.map(lang =>\r\n          <Button size=\"xs\" variant={language === lang.key ? \"success\" : \"secondary\"} key={language.key} onClick={() => handleLanguageChange(lang.key)}>{lang.display}</Button>\r\n            ) \r\n        }\r\n        </ButtonGroup>\r\n        <ButtonGroup className=\"mr-2\" size=\"sm\">\r\n          <Button onClick={getQuestionsAndGenerateJSONMock}>Get Questions</Button>\r\n        </ButtonGroup>\r\n        {chariteData ? <AmazonSettings /> : null}\r\n\r\n      </ButtonToolbar>\r\n      <Accordion>\r\n        {\r\n          Object.keys(bla).map((key, i) => \r\n            <Card key={\"Card\" + i}>\r\n              <Accordion.Toggle as={Card.Header} eventKey={i}>\r\n                { \"Show \" + key + \" JSON\"}\r\n              </Accordion.Toggle>\r\n              <Accordion.Collapse eventKey={i}>\r\n                <Card.Body>\r\n                <Form.Group controlId={\"controlTextarea\" + i}>\r\n                  <Form.Label>{key}</Form.Label>\r\n                  <Form.Control as=\"textarea\" rows=\"50\" value={bla[key] && JSON.stringify(bla[key], null, 4)} disabled/>\r\n                </Form.Group>\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Card>\r\n          )\r\n        }\r\n      </Accordion>\r\n    </Container>\r\n  )\r\n}\r\n\r\nCreatorComponent.defaultProps = defaultProps\r\n\r\nexport default CreatorComponent","import { connect } from \"react-redux\"\r\nimport CreatorComponent from \"./CreatorComponent\"\r\nimport { \r\n  getQuestionsAndGenerateJSONMock,\r\n  handleLanguageChange\r\n} from \"./duck/operations\"\r\n\r\nexport const mapStateToProps = (state, ownProps) => ({\r\n  order: state.creator.order,\r\n  stringMap: state.creator.stringMap,\r\n  language: state.creator.language,\r\n  chariteData: state.creator.chariteData,\r\n  connectConf: state.creator.connectConf,\r\n  lambdaKeys: state.creator.lambdaKeys\r\n})\r\n\r\nexport const mapDispatchToProps = {\r\n  getQuestionsAndGenerateJSONMock,\r\n  handleLanguageChange\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatorComponent)","import React from \"react\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport FormControl from \"react-bootstrap/FormControl\"\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\nexport const RadioOptionsComponent = props => {\r\n  return (\r\n    <InputGroup>\r\n      <FormControl\r\n        placeholder=\"Enter answer text\"\r\n      />\r\n      <InputGroup.Append>\r\n        <Button variant=\"outline-secondary\" onClick={() => alert(\"TBD\")}>up</Button>\r\n        <Button variant=\"outline-secondary\" onClick={() => alert(\"TBD\")}>down</Button>\r\n        <Button varion=\"danger\" onClick={() => alert(\"TBD\")}>add</Button>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n  )\r\n}\r\n\r\nexport default RadioOptionsComponent","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport FormControl from \"react-bootstrap/FormControl\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport RadioOptionComponent from \"./RadioOptionComponent\"\r\n\r\nexport const defaultProps = {\r\n\r\n}\r\n\r\n\r\nexport const propTypes = {\r\n  text: PropTypes.string\r\n}\r\n\r\n\r\nexport const QuestionComponent = props => {\r\n\r\n  const { uuid, question, handleRemoveQuestion,\r\n    handleMoveQuestion, index, total\r\n  } = props\r\n\r\n  return (\r\n    <InputGroup>\r\n      <FormControl\r\n        as=\"textarea\"\r\n        placeholder=\"Enter question text\"\r\n        defaultValue={question.text}\r\n      />\r\n    <InputGroup.Append>\r\n      <Button variant=\"outline-secondary\" disabled={index === 0} onClick={() => handleMoveQuestion(uuid, -1)}>up</Button>\r\n      <Button variant=\"outline-secondary\" disabled={total === index} onClick={() => handleMoveQuestion(uuid, 1)}>down</Button>\r\n      <Button varion=\"danger\" onClick={() => handleRemoveQuestion(uuid)}>remove</Button>\r\n    </InputGroup.Append>\r\n    { question.type === \"radio\" ? <RadioOptionComponent options={question.options} />: null}\r\n    </InputGroup>\r\n  )\r\n}\r\n\r\nQuestionComponent.propTypes = propTypes\r\nQuestionComponent.defaultProps = defaultProps\r\n\r\nexport default QuestionComponent","import React from \"react\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport FormControl from \"react-bootstrap/FormControl\"\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\n\r\nexport const AddRadioOptionComponent = props => {\r\n  const { handleAddRadioOption } = props\r\n  return (\r\n    <InputGroup>\r\n      <FormControl\r\n        placeholder=\"Enter answer text\"\r\n      />\r\n      <InputGroup.Append>\r\n        <Button varion=\"danger\" onClick={() => handleAddRadioOption()}>add</Button>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n  )\r\n}\r\n\r\nexport default AddRadioOptionComponent","//import fetch from \"cross-fetch\"\r\nimport { uuid as uuidV4 } from \"uuidv4\"\r\nimport {\r\n  resetNewQuestion,\r\n  addQuestion,\r\n  removeQuestion,\r\n  updateQuestion,\r\n  setQuestionText,\r\n  setQuestionType,\r\n  moveQuestion,\r\n  addRadioOption\r\n} from \"./actions\"\r\n\r\n\r\nexport const handleAddQuestion = question => {\r\n  return dispatch => {\r\n    question.uuid = uuidV4()\r\n    dispatch(addQuestion(question))\r\n    dispatch(resetNewQuestion({text: \"\", type: null}))\r\n  }\r\n}\r\n\r\nexport const handleRemoveQuestion = question => {\r\n  return dispatch => {\r\n    dispatch(removeQuestion(question))\r\n  }\r\n}\r\n\r\nexport const handleUpateQuestion = question => {\r\n  return dispatch => {\r\n    dispatch(updateQuestion)\r\n  }\r\n}\r\n\r\nexport const handleQuestionTextChange = text => {\r\n  return dispatch => {\r\n    dispatch(setQuestionText(text))\r\n  }\r\n}\r\n\r\nexport const handleQuestionTypeChange = type => {\r\n  return dispatch => {\r\n    dispatch(setQuestionType(type))\r\n  }\r\n}\r\n\r\nexport const handleMoveQuestion = (uuid, direction) => {\r\n  return dispatch => {\r\n    dispatch(moveQuestion(uuid, direction))\r\n  }\r\n}\r\n\r\nexport const handleAddRadioOption = option => {\r\n  return dispatch => {\r\n    dispatch(addRadioOption(option))\r\n  }\r\n}","import { connect } from \"react-redux\"\r\nimport AddRadioOptionComponent from \"./AddRadioOptionComponent\"\r\nimport {\r\n  handleAddRadioOption\r\n\r\n} from \"./duck/operations\"\r\n\r\n\r\nexport const mapStateToProps = (state, ownProps) => ({\r\n})\r\n\r\nexport const mapDispatchToProps = {\r\n  handleAddRadioOption\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddRadioOptionComponent)","import React from \"react\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport FormControl from \"react-bootstrap/FormControl\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Form from \"react-bootstrap/Form\"\r\nimport AddRadioOption from \"./AddRadioOptionContainer\"\r\n\r\nexport const defaultProps = {\r\n  questionTypes: ['radio', 'date'],\r\n}\r\n\r\nexport const AddQuestionComponent = props => {\r\n  const {\r\n    handleAddQuestion,\r\n    questionTypes,\r\n    question,\r\n    handleQuestionTextChange,\r\n    handleQuestionTypeChange\r\n  } = props\r\n\r\n  return (\r\n    <div>\r\n      <InputGroup>\r\n        <FormControl as=\"textarea\"\r\n          placeholder=\"Enter question text\"\r\n          value={question.text}\r\n          onChange={(event) => handleQuestionTextChange(event.target.value)}\r\n          \r\n        />\r\n        <InputGroup.Append>\r\n          <Button variant=\"success\" disabled={question.text.length === 0 || question.type === null}\r\n          onClick={() => handleAddQuestion(question)}>Add Question</Button>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n      <Form>\r\n        {questionTypes.map((qtype, i) =>\r\n          <Form.Check inline label={`question type is ${qtype}`} type=\"radio\"\r\n            checked={question.type === qtype} onChange={() => handleQuestionTypeChange(qtype)}\r\n            id={`questiontype-${qtype}`} key={`questiontype-${qtype}`}/>\r\n        )}\r\n      </Form>\r\n      {\r\n        question.type === \"radio\" ? <AddRadioOption /> : null\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nAddQuestionComponent.defaultProps = defaultProps\r\n\r\nexport default AddQuestionComponent","import { connect } from \"react-redux\"\r\nimport AddQuestionComponent from \"./AddQuestionComponent\"\r\nimport {\r\n  handleAddQuestion,\r\n  handleUpateQuestion,\r\n  handleQuestionTextChange,\r\n  handleQuestionTypeChange\r\n} from \"./duck/operations\"\r\n\r\n\r\nexport const mapStateToProps = (state, ownProps) => ({\r\n  question: state.questioncatalog.newQuestion\r\n})\r\n\r\nexport const mapDispatchToProps = {\r\n  handleAddQuestion,\r\n  handleUpateQuestion,\r\n  handleQuestionTextChange,\r\n  handleQuestionTypeChange\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddQuestionComponent)","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Container from \"react-bootstrap/Container\"\r\nimport Question from \"./QuestionComponent\"\r\nimport AddQuestion from \"./AddQuestionContainer\"\r\n\r\nexport const defaultProps = {}\r\n\r\nexport const propTypes = {\r\n  questions: PropTypes.array\r\n}\r\n\r\nexport const QuestionCatalogComponent = props => {\r\n\r\n  const {\r\n    questions,\r\n    handleRemoveQuestion,\r\n    handleMoveQuestion\r\n  } = props\r\n\r\n  return (\r\n    <Container>\r\n      <h1>QuestionCatalogComponent</h1>\r\n      {questions.map((question,i) => \r\n        <Question key={`question_${i}`} uuid={question.uuid} question={question}\r\n          handleRemoveQuestion={handleRemoveQuestion}\r\n          handleMoveQuestion={handleMoveQuestion}\r\n          index={i} total={questions.length - 1}\r\n        />\r\n      )}\r\n      <AddQuestion />\r\n    </Container>\r\n  )\r\n}\r\n\r\nQuestionCatalogComponent.propTypes = propTypes\r\nQuestionCatalogComponent.defaultProps = defaultProps\r\n\r\nexport default QuestionCatalogComponent","import { connect } from \"react-redux\"\r\nimport QuestionCatalogComponent from \"./QuestionCatalogComponent\"\r\nimport {\r\n  handleRemoveQuestion,\r\n  handleUpateQuestion,\r\n  handleMoveQuestion\r\n} from \"./duck/operations\"\r\n\r\n\r\nexport const mapStateToProps = (state, ownProps) => ({\r\n  questions: state.questioncatalog.questions\r\n})\r\n\r\nexport const mapDispatchToProps = {\r\n  handleRemoveQuestion,\r\n  handleUpateQuestion,\r\n  handleMoveQuestion\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionCatalogComponent)","import React from \"react\";\r\nimport { HashRouter, Route, Link } from \"react-router-dom\"\r\nimport { Creator } from \"./creator\"\r\nimport { QuestionCatalog } from \"./questioncatalog\"\r\n\r\nexport default function App() {\r\n  return (\r\n    <HashRouter basename='/'>\r\n      <div>\r\n        <ul>\r\n          <li><Link to=\"/\">Create Amazon Connect</Link></li>\r\n          <li><Link to=\"/questions\">Create Questions</Link></li>\r\n        </ul>\r\n        <hr />\r\n        <Route exact path=\"/\" component={Creator} />\r\n        <Route path=\"/questions\" component={QuestionCatalog} />\r\n      </div>\r\n    </HashRouter>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './store'\r\n\r\nimport App from './app/App'\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}